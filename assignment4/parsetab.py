
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftPOINTERDIVIDErightUMINUSleftORANDrightNEGATIONINT FLOAT VOID MAIN IF WHILE ELSE RETURN NAME NUMBER FLOATNUM POINTER ASSIGN COMMA LFBRACK RFBRACK LPAREN RPAREN SEMICOLON AMPERSAND PLUS MINUS DIVIDE LTE GTE LT GT COMPAREEQUAL NEGATION COMPARENOTEQUAL OR AND\n\tstatement : declarations functionblocks\n\t\n\tdeclarations : declarations vardecl SEMICOLON \n\t\t\t\t | declarations funcdecl SEMICOLON \n\t\t\t\t | \n\t\n\tvardecl : type decllist\n\t\n\tfuncdecl : type pointerdef LPAREN paramlist RPAREN\n\t         | type NAME LPAREN paramlist RPAREN\n\t\n\tparamlist : paramlistnotempty\n\t\t\t  | \n\t\n\tparamlistnotempty : type startwithany C\n\t\n\tC : COMMA paramlistnotempty\n\t  |  \n\t\n\tfunctionblocks : functionblock functionblocks\n\t\t\t\t   | \n\t\n\tfunctionblock : type functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK\n\t\t\t\t  | mainblock\n\t\n\tfunctionscope : NAME\n\t\t\t\t\t| pointerdef\n\t\n\ttype : INT\n\t\t | FLOAT\n\t\n\tmainblock : VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK\n\t\n\tlines : line SEMICOLON lines\n\t\n\tlines : \n\t \n\tlines : ifblock lines\n\t\t\t| whileblock lines \n\t\n\tifblock : IF LPAREN CONDITION  RPAREN conditionalbody\n\t\n\twhileblock : WHILE LPAREN CONDITION RPAREN conditionalbody\n\t\n\tifblock : IF LPAREN CONDITION RPAREN  conditionalbody ELSE ifelsehandler\n\t\n\tifelsehandler : conditionalbody\n\t\n\tifelsehandler : ifblock\n\t\n\tconditionalbody : line SEMICOLON \n\t\t\t\t\t| LFBRACK lines RFBRACK \n\t\n\tCONDITION : booleanexpr\n\t\n\tbooleanexpr : booleanexpr OR booleanexpr\n\t            | booleanexpr AND booleanexpr\n\t            | LPAREN booleanexpr RPAREN\n\t            | NEGATION booleanexpr\n\t\n\tboolfromarith : arithmeticexpr LTE arithmeticexpr\n\t\t        \t | arithmeticexpr GTE arithmeticexpr\n\t\t        \t | arithmeticexpr LT arithmeticexpr\n\t\t        \t | arithmeticexpr GT arithmeticexpr\n\t\t        \t | arithmeticexpr COMPARENOTEQUAL arithmeticexpr\n\t\t        \t | arithmeticexpr COMPAREEQUAL arithmeticexpr\n\t\n\tbooleanexpr : boolfromarith\n\t\n\tline : type decllist\n\t\t | assignmentlist\n\t\t | RETURN startwithany\n\t\n\tdecllist : pointerdef x\n\t\n\tpointerdef : POINTER NAME\n\t\t\t\t\t| POINTER pointerdef\n\t\n\tx : COMMA pointerdef x\n\t\n\tdecllist : NAME x\n\t\n\tx : COMMA  NAME x\n\t\n\tx : \n\t\n\tassignmentlist : assignment\n\t\n\tassignment : NAME ASSIGN arithmeticexpr\n\t\n\tassignment : startwithstar ASSIGN arithmeticexpr\n\t\n\tarithmeticexpr : arithmeticexpr PLUS arithmeticexpr\n\t\t\t\t   | arithmeticexpr MINUS arithmeticexpr\n\t\t\t\t   | arithmeticexpr POINTER arithmeticexpr\n\t\t\t\t   | arithmeticexpr DIVIDE arithmeticexpr\n\t\n\tarithmeticexpr : MINUS arithmeticexpr %prec UMINUS\n\t\n\tarithmeticexpr : LPAREN arithmeticexpr RPAREN\n\t\n\tarithmeticexpr : NUMBER\n\t\t\t\t   | FLOATNUM\n\t\n\tarithmeticexpr : startwithany\n\t\n\tstartwithstar : POINTER startwithany\n\t\n\tstartwithany : POINTER startwithany\n\t\t\t\t| AMPERSAND startwithany\n\t\t\t\t| NAME\n\t'
    
_lr_action_items = {'SEMICOLON':([4,9,17,18,20,25,26,27,31,34,35,42,43,45,48,50,60,62,63,64,65,72,79,80,81,86,87,88,89,96,101,119,120,121,122,123,127,],[14,21,-54,-5,-54,-49,-50,-52,-48,-54,-54,-51,-53,-70,-7,-6,78,-55,-46,-68,-69,-47,-54,-45,-54,-64,-66,-56,-65,-57,-62,-63,-59,-60,-58,-61,138,]),'POINTER':([8,10,11,12,16,28,36,41,44,45,46,51,53,54,58,61,64,65,68,70,74,75,77,78,84,85,86,87,88,89,90,94,95,96,100,101,102,103,104,105,107,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,126,128,130,131,132,133,134,135,136,138,139,140,141,142,143,],[16,-19,-20,16,16,16,44,51,44,-70,44,44,51,44,51,16,-68,-69,51,44,44,44,44,51,44,44,-64,-66,103,-65,44,44,103,103,103,-62,44,44,44,44,44,44,51,103,44,44,44,44,44,44,51,-63,103,-60,103,-61,51,-26,103,103,103,103,103,103,-27,-31,51,-32,-30,-28,-29,]),'NAME':([8,10,11,12,16,28,36,41,44,46,51,53,54,58,61,68,70,74,75,77,78,84,85,90,94,102,103,104,105,107,108,109,112,113,114,115,116,117,118,126,128,136,138,139,140,141,142,143,],[17,-19,-20,22,25,35,45,52,45,45,45,52,45,52,79,52,45,45,45,45,52,45,45,45,45,45,45,45,45,45,45,52,45,45,45,45,45,45,52,52,-26,-27,-31,52,-32,-30,-28,-29,]),'NEGATION':([74,77,90,94,107,108,],[90,90,90,90,90,90,]),'ASSIGN':([45,52,57,64,65,69,],[-70,70,75,-68,-69,-67,]),'RPAREN':([24,29,30,32,37,38,39,40,45,47,64,65,67,82,86,87,89,91,92,93,97,100,101,106,110,111,119,120,121,122,123,124,125,129,130,131,132,133,134,135,],[33,-9,-9,-9,48,-8,49,50,-70,-12,-68,-69,-10,-11,-64,-66,-65,-33,109,-44,118,119,-62,-37,129,119,-63,-59,-60,-58,-61,-35,-34,-36,-43,-41,-42,-40,-39,-38,]),'AMPERSAND':([10,11,36,44,46,51,54,70,74,75,77,84,85,90,94,102,103,104,105,107,108,112,113,114,115,116,117,],[-19,-20,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'RETURN':([41,53,58,68,78,109,118,126,128,136,138,139,140,141,142,143,],[54,54,54,54,54,54,54,54,-26,-27,-31,54,-32,-30,-28,-29,]),'NUMBER':([70,74,75,77,84,85,90,94,102,103,104,105,107,108,112,113,114,115,116,117,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'LFBRACK':([33,49,109,118,139,],[41,68,126,126,126,]),'IF':([41,53,58,68,78,126,128,136,138,139,140,141,142,143,],[56,56,56,56,56,56,-26,-27,-31,56,-32,-30,-28,-29,]),'COMPAREEQUAL':([45,64,65,86,87,89,95,101,111,119,120,121,122,123,],[-70,-68,-69,-64,-66,-65,112,-62,112,-63,-59,-60,-58,-61,]),'OR':([45,64,65,86,87,89,91,93,101,106,110,119,120,121,122,123,124,125,129,130,131,132,133,134,135,],[-70,-68,-69,-64,-66,-65,108,-44,-62,-37,108,-63,-59,-60,-58,-61,-35,-34,-36,-43,-41,-42,-40,-39,-38,]),'DIVIDE':([45,64,65,86,87,88,89,95,96,100,101,111,119,120,121,122,123,130,131,132,133,134,135,],[-70,-68,-69,-64,-66,105,-65,105,105,105,-62,105,-63,105,-60,105,-61,105,105,105,105,105,105,]),'VOID':([0,1,3,7,14,21,73,99,],[-4,6,6,-16,-2,-3,-21,-15,]),'COMPARENOTEQUAL':([45,64,65,86,87,89,95,101,111,119,120,121,122,123,],[-70,-68,-69,-64,-66,-65,114,-62,114,-63,-59,-60,-58,-61,]),'WHILE':([41,53,58,68,78,126,128,136,138,140,141,142,143,],[59,59,59,59,59,59,-26,-27,-31,-32,-30,-28,-29,]),'AND':([45,64,65,86,87,89,91,93,101,106,110,119,120,121,122,123,124,125,129,130,131,132,133,134,135,],[-70,-68,-69,-64,-66,-65,107,-44,-62,-37,107,-63,-59,-60,-58,-61,-35,-34,-36,-43,-41,-42,-40,-39,-38,]),'LTE':([45,64,65,86,87,89,95,101,111,119,120,121,122,123,],[-70,-68,-69,-64,-66,-65,117,-62,117,-63,-59,-60,-58,-61,]),'RFBRACK':([41,53,55,58,68,71,76,78,83,98,126,128,136,137,138,140,141,142,143,],[-23,-23,73,-23,-23,-24,-25,-23,99,-22,-23,-26,-27,140,-31,-32,-30,-28,-29,]),'MAIN':([6,],[15,]),'PLUS':([45,64,65,86,87,88,89,95,96,100,101,111,119,120,121,122,123,130,131,132,133,134,135,],[-70,-68,-69,-64,-66,104,-65,104,104,104,-62,104,-63,-59,-60,-58,-61,104,104,104,104,104,104,]),'GT':([45,64,65,86,87,89,95,101,111,119,120,121,122,123,],[-70,-68,-69,-64,-66,-65,113,-62,113,-63,-59,-60,-58,-61,]),'COMMA':([17,20,25,26,34,35,45,47,64,65,79,81,],[28,28,-49,-50,28,28,-70,66,-68,-69,28,28,]),'LPAREN':([15,17,19,20,22,23,25,26,56,59,70,74,75,77,84,85,90,94,102,103,104,105,107,108,112,113,114,115,116,117,],[24,29,30,32,-17,-18,-49,-50,74,77,84,94,84,94,84,84,94,94,84,84,84,84,94,94,84,84,84,84,84,84,]),'GTE':([45,64,65,86,87,89,95,101,111,119,120,121,122,123,],[-70,-68,-69,-64,-66,-65,116,-62,116,-63,-59,-60,-58,-61,]),'$end':([0,1,2,3,5,7,13,14,21,73,99,],[-4,-14,0,-14,-1,-16,-13,-2,-3,-21,-15,]),'INT':([0,1,3,7,14,21,29,30,32,41,53,58,66,68,73,78,99,109,118,126,128,136,138,139,140,141,142,143,],[-4,10,10,-16,-2,-3,10,10,10,10,10,10,10,10,-21,10,-15,10,10,10,-26,-27,-31,10,-32,-30,-28,-29,]),'MINUS':([45,64,65,70,74,75,77,84,85,86,87,88,89,90,94,95,96,100,101,102,103,104,105,107,108,111,112,113,114,115,116,117,119,120,121,122,123,130,131,132,133,134,135,],[-70,-68,-69,85,85,85,85,85,85,-64,-66,102,-65,85,85,102,102,102,-62,85,85,85,85,85,85,102,85,85,85,85,85,85,-63,-59,-60,-58,-61,102,102,102,102,102,102,]),'FLOAT':([0,1,3,7,14,21,29,30,32,41,53,58,66,68,73,78,99,109,118,126,128,136,138,139,140,141,142,143,],[-4,11,11,-16,-2,-3,11,11,11,11,11,11,11,11,-21,11,-15,11,11,11,-26,-27,-31,11,-32,-30,-28,-29,]),'LT':([45,64,65,86,87,89,95,101,111,119,120,121,122,123,],[-70,-68,-69,-64,-66,-65,115,-62,115,-63,-59,-60,-58,-61,]),'ELSE':([128,138,140,],[139,-31,-32,]),'FLOATNUM':([70,74,75,77,84,85,90,94,102,103,104,105,107,108,112,113,114,115,116,117,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decllist':([8,61,],[18,80,]),'functionblock':([1,3,],[3,3,]),'ifblock':([41,53,58,68,78,126,139,],[53,53,53,53,53,53,141,]),'vardecl':([1,],[4,]),'lines':([41,53,58,68,78,126,],[55,71,76,83,98,137,]),'declarations':([0,],[1,]),'startwithstar':([41,53,58,68,78,109,118,126,139,],[57,57,57,57,57,57,57,57,57,]),'functionblocks':([1,3,],[5,13,]),'assignmentlist':([41,53,58,68,78,109,118,126,139,],[63,63,63,63,63,63,63,63,63,]),'booleanexpr':([74,77,90,94,107,108,],[91,91,106,110,124,125,]),'mainblock':([1,3,],[7,7,]),'conditionalbody':([109,118,139,],[128,136,143,]),'type':([1,3,29,30,32,41,53,58,66,68,78,109,118,126,139,],[8,12,36,36,36,61,61,61,36,61,61,61,61,61,61,]),'line':([41,53,58,68,78,109,118,126,139,],[60,60,60,60,60,127,127,60,127,]),'funcdecl':([1,],[9,]),'functionscope':([8,12,],[19,19,]),'boolfromarith':([74,77,90,94,107,108,],[93,93,93,93,93,93,]),'CONDITION':([74,77,],[92,97,]),'C':([47,],[67,]),'paramlist':([29,30,32,],[37,39,40,]),'x':([17,20,34,35,79,81,],[27,31,42,43,27,31,]),'ifelsehandler':([139,],[142,]),'statement':([0,],[2,]),'whileblock':([41,53,58,68,78,126,],[58,58,58,58,58,58,]),'pointerdef':([8,12,16,28,61,],[20,23,26,34,81,]),'paramlistnotempty':([29,30,32,66,],[38,38,38,82,]),'arithmeticexpr':([70,74,75,77,84,85,90,94,102,103,104,105,107,108,112,113,114,115,116,117,],[88,95,96,95,100,101,95,111,120,121,122,123,95,95,130,131,132,133,134,135,]),'assignment':([41,53,58,68,78,109,118,126,139,],[62,62,62,62,62,62,62,62,62,]),'startwithany':([36,44,46,51,54,70,74,75,77,84,85,90,94,102,103,104,105,107,108,112,113,114,115,116,117,],[47,64,65,69,72,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> declarations functionblocks','statement',2,'p_statement_INIT','Parser.py',129),
  ('declarations -> declarations vardecl SEMICOLON','declarations',3,'p_declarations_varfunc','Parser.py',134),
  ('declarations -> declarations funcdecl SEMICOLON','declarations',3,'p_declarations_varfunc','Parser.py',135),
  ('declarations -> <empty>','declarations',0,'p_declarations_varfunc','Parser.py',136),
  ('vardecl -> type decllist','vardecl',2,'p_vardecl_end','Parser.py',141),
  ('funcdecl -> type pointerdef LPAREN paramlist RPAREN','funcdecl',5,'p_funcdecl_end','Parser.py',146),
  ('funcdecl -> type NAME LPAREN paramlist RPAREN','funcdecl',5,'p_funcdecl_end','Parser.py',147),
  ('paramlist -> paramlistnotempty','paramlist',1,'p_paramlist_emptyhandle','Parser.py',152),
  ('paramlist -> <empty>','paramlist',0,'p_paramlist_emptyhandle','Parser.py',153),
  ('paramlistnotempty -> type startwithany C','paramlistnotempty',3,'p_paramlistnotempty_C','Parser.py',158),
  ('C -> COMMA paramlistnotempty','C',2,'p_C_end','Parser.py',163),
  ('C -> <empty>','C',0,'p_C_end','Parser.py',164),
  ('functionblocks -> functionblock functionblocks','functionblocks',2,'p_functionblocks_eps','Parser.py',169),
  ('functionblocks -> <empty>','functionblocks',0,'p_functionblocks_eps','Parser.py',170),
  ('functionblock -> type functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK','functionblock',8,'p_functionblock_handle','Parser.py',175),
  ('functionblock -> mainblock','functionblock',1,'p_functionblock_handle','Parser.py',176),
  ('functionscope -> NAME','functionscope',1,'p_functionscope_handle','Parser.py',181),
  ('functionscope -> pointerdef','functionscope',1,'p_functionscope_handle','Parser.py',182),
  ('type -> INT','type',1,'p_type_end','Parser.py',192),
  ('type -> FLOAT','type',1,'p_type_end','Parser.py',193),
  ('mainblock -> VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK','mainblock',7,'p_mainblock_INIT','Parser.py',198),
  ('lines -> line SEMICOLON lines','lines',3,'p_lines_line','Parser.py',209),
  ('lines -> <empty>','lines',0,'p_lines_eps','Parser.py',225),
  ('lines -> ifblock lines','lines',2,'p_lines_defblock','Parser.py',231),
  ('lines -> whileblock lines','lines',2,'p_lines_defblock','Parser.py',232),
  ('ifblock -> IF LPAREN CONDITION RPAREN conditionalbody','ifblock',5,'p_ifblock_if','Parser.py',246),
  ('whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody','whileblock',5,'p_whileblock_def','Parser.py',253),
  ('ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler','ifblock',7,'p_ifblock_ifelse','Parser.py',260),
  ('ifelsehandler -> conditionalbody','ifelsehandler',1,'p_ifelsehandler_terminate','Parser.py',269),
  ('ifelsehandler -> ifblock','ifelsehandler',1,'p_ifelsehandler_nem','Parser.py',275),
  ('conditionalbody -> line SEMICOLON','conditionalbody',2,'p_conditionalbody_def','Parser.py',281),
  ('conditionalbody -> LFBRACK lines RFBRACK','conditionalbody',3,'p_conditionalbody_def','Parser.py',282),
  ('CONDITION -> booleanexpr','CONDITION',1,'p_CONDITION_exist','Parser.py',295),
  ('booleanexpr -> booleanexpr OR booleanexpr','booleanexpr',3,'p_booleanexpr_term','Parser.py',301),
  ('booleanexpr -> booleanexpr AND booleanexpr','booleanexpr',3,'p_booleanexpr_term','Parser.py',302),
  ('booleanexpr -> LPAREN booleanexpr RPAREN','booleanexpr',3,'p_booleanexpr_term','Parser.py',303),
  ('booleanexpr -> NEGATION booleanexpr','booleanexpr',2,'p_booleanexpr_term','Parser.py',304),
  ('boolfromarith -> arithmeticexpr LTE arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','Parser.py',320),
  ('boolfromarith -> arithmeticexpr GTE arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','Parser.py',321),
  ('boolfromarith -> arithmeticexpr LT arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','Parser.py',322),
  ('boolfromarith -> arithmeticexpr GT arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','Parser.py',323),
  ('boolfromarith -> arithmeticexpr COMPARENOTEQUAL arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','Parser.py',324),
  ('boolfromarith -> arithmeticexpr COMPAREEQUAL arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','Parser.py',325),
  ('booleanexpr -> boolfromarith','booleanexpr',1,'p_booleanexpr_boolfromarith','Parser.py',348),
  ('line -> type decllist','line',2,'p_line_decl','Parser.py',359),
  ('line -> assignmentlist','line',1,'p_line_decl','Parser.py',360),
  ('line -> RETURN startwithany','line',2,'p_line_decl','Parser.py',361),
  ('decllist -> pointerdef x','decllist',2,'p_declist_ts','Parser.py',374),
  ('pointerdef -> POINTER NAME','pointerdef',2,'p_pointerdef_ch','Parser.py',383),
  ('pointerdef -> POINTER pointerdef','pointerdef',2,'p_pointerdef_ch','Parser.py',384),
  ('x -> COMMA pointerdef x','x',3,'p_x_ts','Parser.py',396),
  ('decllist -> NAME x','decllist',2,'p_decllist_id','Parser.py',406),
  ('x -> COMMA NAME x','x',3,'p_x_listhandle','Parser.py',416),
  ('x -> <empty>','x',0,'p_x_eps','Parser.py',426),
  ('assignmentlist -> assignment','assignmentlist',1,'p_assignmentlist_single','Parser.py',437),
  ('assignment -> NAME ASSIGN arithmeticexpr','assignment',3,'p_assignment_new_name','Parser.py',448),
  ('assignment -> startwithstar ASSIGN arithmeticexpr','assignment',3,'p_assignment_new_startwithstar','Parser.py',461),
  ('arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr','arithmeticexpr',3,'p_arithmeticexpr_binop','Parser.py',471),
  ('arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr','arithmeticexpr',3,'p_arithmeticexpr_binop','Parser.py',472),
  ('arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr','arithmeticexpr',3,'p_arithmeticexpr_binop','Parser.py',473),
  ('arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr','arithmeticexpr',3,'p_arithmeticexpr_binop','Parser.py',474),
  ('arithmeticexpr -> MINUS arithmeticexpr','arithmeticexpr',2,'p_arithmeticexpr_uminus','Parser.py',490),
  ('arithmeticexpr -> LPAREN arithmeticexpr RPAREN','arithmeticexpr',3,'p_arithmeticexpr_paren','Parser.py',498),
  ('arithmeticexpr -> NUMBER','arithmeticexpr',1,'p_arithmeticexpr_terminal_NUMBER','Parser.py',506),
  ('arithmeticexpr -> FLOATNUM','arithmeticexpr',1,'p_arithmeticexpr_terminal_NUMBER','Parser.py',507),
  ('arithmeticexpr -> startwithany','arithmeticexpr',1,'p_arithmeticexpr_terminal_startwithany','Parser.py',515),
  ('startwithstar -> POINTER startwithany','startwithstar',2,'p_startwithstar_define','Parser.py',523),
  ('startwithany -> POINTER startwithany','startwithany',2,'p_startwithany_define','Parser.py',531),
  ('startwithany -> AMPERSAND startwithany','startwithany',2,'p_startwithany_define','Parser.py',532),
  ('startwithany -> NAME','startwithany',1,'p_startwithany_define','Parser.py',533),
]
