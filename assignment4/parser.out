Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> declarations functionblocks
Rule 2     declarations -> declarations vardecl SEMICOLON
Rule 3     declarations -> declarations funcdecl SEMICOLON
Rule 4     declarations -> <empty>
Rule 5     vardecl -> type decllist
Rule 6     funcdecl -> type pointerdef LPAREN paramlist RPAREN
Rule 7     funcdecl -> type NAME LPAREN paramlist RPAREN
Rule 8     paramlist -> paramlistnotempty
Rule 9     paramlist -> <empty>
Rule 10    paramlistnotempty -> type startwithany C
Rule 11    C -> COMMA paramlistnotempty
Rule 12    C -> <empty>
Rule 13    functionblocks -> functionblock functionblocks
Rule 14    functionblocks -> <empty>
Rule 15    functionblock -> type functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK
Rule 16    functionblock -> mainblock
Rule 17    functionscope -> NAME
Rule 18    functionscope -> pointerdef
Rule 19    type -> INT
Rule 20    type -> FLOAT
Rule 21    mainblock -> VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK
Rule 22    lines -> line SEMICOLON lines
Rule 23    lines -> <empty>
Rule 24    lines -> ifblock lines
Rule 25    lines -> whileblock lines
Rule 26    ifblock -> IF LPAREN CONDITION RPAREN conditionalbody
Rule 27    whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody
Rule 28    ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler
Rule 29    ifelsehandler -> conditionalbody
Rule 30    ifelsehandler -> ifblock
Rule 31    conditionalbody -> line SEMICOLON
Rule 32    conditionalbody -> LFBRACK lines RFBRACK
Rule 33    CONDITION -> booleanexpr
Rule 34    booleanexpr -> booleanexpr OR booleanexpr
Rule 35    booleanexpr -> booleanexpr AND booleanexpr
Rule 36    booleanexpr -> LPAREN booleanexpr RPAREN
Rule 37    booleanexpr -> NEGATION booleanexpr
Rule 38    boolfromarith -> arithmeticexpr LTE arithmeticexpr
Rule 39    boolfromarith -> arithmeticexpr GTE arithmeticexpr
Rule 40    boolfromarith -> arithmeticexpr LT arithmeticexpr
Rule 41    boolfromarith -> arithmeticexpr GT arithmeticexpr
Rule 42    boolfromarith -> arithmeticexpr COMPARENOTEQUAL arithmeticexpr
Rule 43    boolfromarith -> arithmeticexpr COMPAREEQUAL arithmeticexpr
Rule 44    booleanexpr -> boolfromarith
Rule 45    line -> type decllist
Rule 46    line -> assignmentlist
Rule 47    line -> RETURN startwithany
Rule 48    decllist -> pointerdef x
Rule 49    pointerdef -> POINTER NAME
Rule 50    pointerdef -> POINTER pointerdef
Rule 51    x -> COMMA pointerdef x
Rule 52    decllist -> NAME x
Rule 53    x -> COMMA NAME x
Rule 54    x -> <empty>
Rule 55    assignmentlist -> assignment
Rule 56    assignment -> NAME ASSIGN arithmeticexpr
Rule 57    assignment -> startwithstar ASSIGN arithmeticexpr
Rule 58    arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr
Rule 59    arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr
Rule 60    arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr
Rule 61    arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr
Rule 62    arithmeticexpr -> MINUS arithmeticexpr
Rule 63    arithmeticexpr -> LPAREN arithmeticexpr RPAREN
Rule 64    arithmeticexpr -> NUMBER
Rule 65    arithmeticexpr -> FLOATNUM
Rule 66    arithmeticexpr -> startwithany
Rule 67    startwithstar -> POINTER startwithany
Rule 68    startwithany -> POINTER startwithany
Rule 69    startwithany -> AMPERSAND startwithany
Rule 70    startwithany -> NAME

Terminals, with rules where they appear

AMPERSAND            : 69
AND                  : 35
ASSIGN               : 56 57
COMMA                : 11 51 53
COMPAREEQUAL         : 43
COMPARENOTEQUAL      : 42
DIVIDE               : 61
ELSE                 : 28
FLOAT                : 20
FLOATNUM             : 65
GT                   : 41
GTE                  : 39
IF                   : 26 28
INT                  : 19
LFBRACK              : 15 21 32
LPAREN               : 6 7 15 21 26 27 28 36 63
LT                   : 40
LTE                  : 38
MAIN                 : 21
MINUS                : 59 62
NAME                 : 7 17 49 52 53 56 70
NEGATION             : 37
NUMBER               : 64
OR                   : 34
PLUS                 : 58
POINTER              : 49 50 60 67 68
RETURN               : 47
RFBRACK              : 15 21 32
RPAREN               : 6 7 15 21 26 27 28 36 63
SEMICOLON            : 2 3 22 31
VOID                 : 21
WHILE                : 27
error                : 

Nonterminals, with rules where they appear

C                    : 10
CONDITION            : 26 27 28
arithmeticexpr       : 38 38 39 39 40 40 41 41 42 42 43 43 56 57 58 58 59 59 60 60 61 61 62 63
assignment           : 55
assignmentlist       : 46
booleanexpr          : 33 34 34 35 35 36 37
boolfromarith        : 44
conditionalbody      : 26 27 28 29
declarations         : 1 2 3
decllist             : 5 45
funcdecl             : 3
functionblock        : 13
functionblocks       : 1 13
functionscope        : 15
ifblock              : 24 30
ifelsehandler        : 28
line                 : 22 31
lines                : 15 21 22 24 25 32
mainblock            : 16
paramlist            : 6 7 15
paramlistnotempty    : 8 11
pointerdef           : 6 18 48 50 51
startwithany         : 10 47 66 67 68 69
startwithstar        : 57
statement            : 0
type                 : 5 6 7 10 15 45
vardecl              : 2
whileblock           : 25
x                    : 48 51 52 53

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . declarations functionblocks
    (2) declarations -> . declarations vardecl SEMICOLON
    (3) declarations -> . declarations funcdecl SEMICOLON
    (4) declarations -> .

    INT             reduce using rule 4 (declarations -> .)
    FLOAT           reduce using rule 4 (declarations -> .)
    VOID            reduce using rule 4 (declarations -> .)
    $end            reduce using rule 4 (declarations -> .)

    declarations                   shift and go to state 1
    statement                      shift and go to state 2

state 1

    (1) statement -> declarations . functionblocks
    (2) declarations -> declarations . vardecl SEMICOLON
    (3) declarations -> declarations . funcdecl SEMICOLON
    (13) functionblocks -> . functionblock functionblocks
    (14) functionblocks -> .
    (5) vardecl -> . type decllist
    (6) funcdecl -> . type pointerdef LPAREN paramlist RPAREN
    (7) funcdecl -> . type NAME LPAREN paramlist RPAREN
    (15) functionblock -> . type functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK
    (16) functionblock -> . mainblock
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) mainblock -> . VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK

    $end            reduce using rule 14 (functionblocks -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    VOID            shift and go to state 6

    type                           shift and go to state 8
    functionblock                  shift and go to state 3
    vardecl                        shift and go to state 4
    funcdecl                       shift and go to state 9
    functionblocks                 shift and go to state 5
    mainblock                      shift and go to state 7

state 2

    (0) S' -> statement .



state 3

    (13) functionblocks -> functionblock . functionblocks
    (13) functionblocks -> . functionblock functionblocks
    (14) functionblocks -> .
    (15) functionblock -> . type functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK
    (16) functionblock -> . mainblock
    (19) type -> . INT
    (20) type -> . FLOAT
    (21) mainblock -> . VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK

    $end            reduce using rule 14 (functionblocks -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    VOID            shift and go to state 6

    type                           shift and go to state 12
    functionblocks                 shift and go to state 13
    functionblock                  shift and go to state 3
    mainblock                      shift and go to state 7

state 4

    (2) declarations -> declarations vardecl . SEMICOLON

    SEMICOLON       shift and go to state 14


state 5

    (1) statement -> declarations functionblocks .

    $end            reduce using rule 1 (statement -> declarations functionblocks .)


state 6

    (21) mainblock -> VOID . MAIN LPAREN RPAREN LFBRACK lines RFBRACK

    MAIN            shift and go to state 15


state 7

    (16) functionblock -> mainblock .

    INT             reduce using rule 16 (functionblock -> mainblock .)
    FLOAT           reduce using rule 16 (functionblock -> mainblock .)
    VOID            reduce using rule 16 (functionblock -> mainblock .)
    $end            reduce using rule 16 (functionblock -> mainblock .)


state 8

    (5) vardecl -> type . decllist
    (6) funcdecl -> type . pointerdef LPAREN paramlist RPAREN
    (7) funcdecl -> type . NAME LPAREN paramlist RPAREN
    (15) functionblock -> type . functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK
    (48) decllist -> . pointerdef x
    (52) decllist -> . NAME x
    (49) pointerdef -> . POINTER NAME
    (50) pointerdef -> . POINTER pointerdef
    (17) functionscope -> . NAME
    (18) functionscope -> . pointerdef

    NAME            shift and go to state 17
    POINTER         shift and go to state 16

    decllist                       shift and go to state 18
    functionscope                  shift and go to state 19
    pointerdef                     shift and go to state 20

state 9

    (3) declarations -> declarations funcdecl . SEMICOLON

    SEMICOLON       shift and go to state 21


state 10

    (19) type -> INT .

    NAME            reduce using rule 19 (type -> INT .)
    POINTER         reduce using rule 19 (type -> INT .)
    AMPERSAND       reduce using rule 19 (type -> INT .)


state 11

    (20) type -> FLOAT .

    NAME            reduce using rule 20 (type -> FLOAT .)
    POINTER         reduce using rule 20 (type -> FLOAT .)
    AMPERSAND       reduce using rule 20 (type -> FLOAT .)


state 12

    (15) functionblock -> type . functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK
    (17) functionscope -> . NAME
    (18) functionscope -> . pointerdef
    (49) pointerdef -> . POINTER NAME
    (50) pointerdef -> . POINTER pointerdef

    NAME            shift and go to state 22
    POINTER         shift and go to state 16

    functionscope                  shift and go to state 19
    pointerdef                     shift and go to state 23

state 13

    (13) functionblocks -> functionblock functionblocks .

    $end            reduce using rule 13 (functionblocks -> functionblock functionblocks .)


state 14

    (2) declarations -> declarations vardecl SEMICOLON .

    INT             reduce using rule 2 (declarations -> declarations vardecl SEMICOLON .)
    FLOAT           reduce using rule 2 (declarations -> declarations vardecl SEMICOLON .)
    VOID            reduce using rule 2 (declarations -> declarations vardecl SEMICOLON .)
    $end            reduce using rule 2 (declarations -> declarations vardecl SEMICOLON .)


state 15

    (21) mainblock -> VOID MAIN . LPAREN RPAREN LFBRACK lines RFBRACK

    LPAREN          shift and go to state 24


state 16

    (49) pointerdef -> POINTER . NAME
    (50) pointerdef -> POINTER . pointerdef
    (49) pointerdef -> . POINTER NAME
    (50) pointerdef -> . POINTER pointerdef

    NAME            shift and go to state 25
    POINTER         shift and go to state 16

    pointerdef                     shift and go to state 26

state 17

    (7) funcdecl -> type NAME . LPAREN paramlist RPAREN
    (52) decllist -> NAME . x
    (17) functionscope -> NAME .
    (51) x -> . COMMA pointerdef x
    (53) x -> . COMMA NAME x
    (54) x -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 29
    COMMA           shift and go to state 28
    SEMICOLON       reduce using rule 54 (x -> .)

  ! LPAREN          [ reduce using rule 17 (functionscope -> NAME .) ]

    x                              shift and go to state 27

state 18

    (5) vardecl -> type decllist .

    SEMICOLON       reduce using rule 5 (vardecl -> type decllist .)


state 19

    (15) functionblock -> type functionscope . LPAREN paramlist RPAREN LFBRACK lines RFBRACK

    LPAREN          shift and go to state 30


state 20

    (6) funcdecl -> type pointerdef . LPAREN paramlist RPAREN
    (48) decllist -> pointerdef . x
    (18) functionscope -> pointerdef .
    (51) x -> . COMMA pointerdef x
    (53) x -> . COMMA NAME x
    (54) x -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 32
    COMMA           shift and go to state 28
    SEMICOLON       reduce using rule 54 (x -> .)

  ! LPAREN          [ reduce using rule 18 (functionscope -> pointerdef .) ]

    x                              shift and go to state 31

state 21

    (3) declarations -> declarations funcdecl SEMICOLON .

    INT             reduce using rule 3 (declarations -> declarations funcdecl SEMICOLON .)
    FLOAT           reduce using rule 3 (declarations -> declarations funcdecl SEMICOLON .)
    VOID            reduce using rule 3 (declarations -> declarations funcdecl SEMICOLON .)
    $end            reduce using rule 3 (declarations -> declarations funcdecl SEMICOLON .)


state 22

    (17) functionscope -> NAME .

    LPAREN          reduce using rule 17 (functionscope -> NAME .)


state 23

    (18) functionscope -> pointerdef .

    LPAREN          reduce using rule 18 (functionscope -> pointerdef .)


state 24

    (21) mainblock -> VOID MAIN LPAREN . RPAREN LFBRACK lines RFBRACK

    RPAREN          shift and go to state 33


state 25

    (49) pointerdef -> POINTER NAME .

    LPAREN          reduce using rule 49 (pointerdef -> POINTER NAME .)
    COMMA           reduce using rule 49 (pointerdef -> POINTER NAME .)
    SEMICOLON       reduce using rule 49 (pointerdef -> POINTER NAME .)


state 26

    (50) pointerdef -> POINTER pointerdef .

    LPAREN          reduce using rule 50 (pointerdef -> POINTER pointerdef .)
    COMMA           reduce using rule 50 (pointerdef -> POINTER pointerdef .)
    SEMICOLON       reduce using rule 50 (pointerdef -> POINTER pointerdef .)


state 27

    (52) decllist -> NAME x .

    SEMICOLON       reduce using rule 52 (decllist -> NAME x .)


state 28

    (51) x -> COMMA . pointerdef x
    (53) x -> COMMA . NAME x
    (49) pointerdef -> . POINTER NAME
    (50) pointerdef -> . POINTER pointerdef

    NAME            shift and go to state 35
    POINTER         shift and go to state 16

    pointerdef                     shift and go to state 34

state 29

    (7) funcdecl -> type NAME LPAREN . paramlist RPAREN
    (8) paramlist -> . paramlistnotempty
    (9) paramlist -> .
    (10) paramlistnotempty -> . type startwithany C
    (19) type -> . INT
    (20) type -> . FLOAT

    RPAREN          reduce using rule 9 (paramlist -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    type                           shift and go to state 36
    paramlist                      shift and go to state 37
    paramlistnotempty              shift and go to state 38

state 30

    (15) functionblock -> type functionscope LPAREN . paramlist RPAREN LFBRACK lines RFBRACK
    (8) paramlist -> . paramlistnotempty
    (9) paramlist -> .
    (10) paramlistnotempty -> . type startwithany C
    (19) type -> . INT
    (20) type -> . FLOAT

    RPAREN          reduce using rule 9 (paramlist -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    type                           shift and go to state 36
    paramlist                      shift and go to state 39
    paramlistnotempty              shift and go to state 38

state 31

    (48) decllist -> pointerdef x .

    SEMICOLON       reduce using rule 48 (decllist -> pointerdef x .)


state 32

    (6) funcdecl -> type pointerdef LPAREN . paramlist RPAREN
    (8) paramlist -> . paramlistnotempty
    (9) paramlist -> .
    (10) paramlistnotempty -> . type startwithany C
    (19) type -> . INT
    (20) type -> . FLOAT

    RPAREN          reduce using rule 9 (paramlist -> .)
    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    type                           shift and go to state 36
    paramlist                      shift and go to state 40
    paramlistnotempty              shift and go to state 38

state 33

    (21) mainblock -> VOID MAIN LPAREN RPAREN . LFBRACK lines RFBRACK

    LFBRACK         shift and go to state 41


state 34

    (51) x -> COMMA pointerdef . x
    (51) x -> . COMMA pointerdef x
    (53) x -> . COMMA NAME x
    (54) x -> .

    COMMA           shift and go to state 28
    SEMICOLON       reduce using rule 54 (x -> .)

    x                              shift and go to state 42

state 35

    (53) x -> COMMA NAME . x
    (51) x -> . COMMA pointerdef x
    (53) x -> . COMMA NAME x
    (54) x -> .

    COMMA           shift and go to state 28
    SEMICOLON       reduce using rule 54 (x -> .)

    x                              shift and go to state 43

state 36

    (10) paramlistnotempty -> type . startwithany C
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    startwithany                   shift and go to state 47

state 37

    (7) funcdecl -> type NAME LPAREN paramlist . RPAREN

    RPAREN          shift and go to state 48


state 38

    (8) paramlist -> paramlistnotempty .

    RPAREN          reduce using rule 8 (paramlist -> paramlistnotempty .)


state 39

    (15) functionblock -> type functionscope LPAREN paramlist . RPAREN LFBRACK lines RFBRACK

    RPAREN          shift and go to state 49


state 40

    (6) funcdecl -> type pointerdef LPAREN paramlist . RPAREN

    RPAREN          shift and go to state 50


state 41

    (21) mainblock -> VOID MAIN LPAREN RPAREN LFBRACK . lines RFBRACK
    (22) lines -> . line SEMICOLON lines
    (23) lines -> .
    (24) lines -> . ifblock lines
    (25) lines -> . whileblock lines
    (45) line -> . type decllist
    (46) line -> . assignmentlist
    (47) line -> . RETURN startwithany
    (26) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody
    (28) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler
    (27) whileblock -> . WHILE LPAREN CONDITION RPAREN conditionalbody
    (19) type -> . INT
    (20) type -> . FLOAT
    (55) assignmentlist -> . assignment
    (56) assignment -> . NAME ASSIGN arithmeticexpr
    (57) assignment -> . startwithstar ASSIGN arithmeticexpr
    (67) startwithstar -> . POINTER startwithany

    RFBRACK         reduce using rule 23 (lines -> .)
    RETURN          shift and go to state 54
    IF              shift and go to state 56
    WHILE           shift and go to state 59
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 52
    POINTER         shift and go to state 51

    type                           shift and go to state 61
    line                           shift and go to state 60
    ifblock                        shift and go to state 53
    lines                          shift and go to state 55
    startwithstar                  shift and go to state 57
    whileblock                     shift and go to state 58
    assignmentlist                 shift and go to state 63
    assignment                     shift and go to state 62

state 42

    (51) x -> COMMA pointerdef x .

    SEMICOLON       reduce using rule 51 (x -> COMMA pointerdef x .)


state 43

    (53) x -> COMMA NAME x .

    SEMICOLON       reduce using rule 53 (x -> COMMA NAME x .)


state 44

    (68) startwithany -> POINTER . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    startwithany                   shift and go to state 64

state 45

    (70) startwithany -> NAME .

    PLUS            reduce using rule 70 (startwithany -> NAME .)
    MINUS           reduce using rule 70 (startwithany -> NAME .)
    POINTER         reduce using rule 70 (startwithany -> NAME .)
    DIVIDE          reduce using rule 70 (startwithany -> NAME .)
    SEMICOLON       reduce using rule 70 (startwithany -> NAME .)
    LTE             reduce using rule 70 (startwithany -> NAME .)
    GTE             reduce using rule 70 (startwithany -> NAME .)
    LT              reduce using rule 70 (startwithany -> NAME .)
    GT              reduce using rule 70 (startwithany -> NAME .)
    COMPARENOTEQUAL reduce using rule 70 (startwithany -> NAME .)
    COMPAREEQUAL    reduce using rule 70 (startwithany -> NAME .)
    RPAREN          reduce using rule 70 (startwithany -> NAME .)
    OR              reduce using rule 70 (startwithany -> NAME .)
    AND             reduce using rule 70 (startwithany -> NAME .)
    COMMA           reduce using rule 70 (startwithany -> NAME .)
    ASSIGN          reduce using rule 70 (startwithany -> NAME .)


state 46

    (69) startwithany -> AMPERSAND . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    startwithany                   shift and go to state 65

state 47

    (10) paramlistnotempty -> type startwithany . C
    (11) C -> . COMMA paramlistnotempty
    (12) C -> .

    COMMA           shift and go to state 66
    RPAREN          reduce using rule 12 (C -> .)

    C                              shift and go to state 67

state 48

    (7) funcdecl -> type NAME LPAREN paramlist RPAREN .

    SEMICOLON       reduce using rule 7 (funcdecl -> type NAME LPAREN paramlist RPAREN .)


state 49

    (15) functionblock -> type functionscope LPAREN paramlist RPAREN . LFBRACK lines RFBRACK

    LFBRACK         shift and go to state 68


state 50

    (6) funcdecl -> type pointerdef LPAREN paramlist RPAREN .

    SEMICOLON       reduce using rule 6 (funcdecl -> type pointerdef LPAREN paramlist RPAREN .)


state 51

    (67) startwithstar -> POINTER . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    startwithany                   shift and go to state 69

state 52

    (56) assignment -> NAME . ASSIGN arithmeticexpr

    ASSIGN          shift and go to state 70


state 53

    (24) lines -> ifblock . lines
    (22) lines -> . line SEMICOLON lines
    (23) lines -> .
    (24) lines -> . ifblock lines
    (25) lines -> . whileblock lines
    (45) line -> . type decllist
    (46) line -> . assignmentlist
    (47) line -> . RETURN startwithany
    (26) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody
    (28) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler
    (27) whileblock -> . WHILE LPAREN CONDITION RPAREN conditionalbody
    (19) type -> . INT
    (20) type -> . FLOAT
    (55) assignmentlist -> . assignment
    (56) assignment -> . NAME ASSIGN arithmeticexpr
    (57) assignment -> . startwithstar ASSIGN arithmeticexpr
    (67) startwithstar -> . POINTER startwithany

    RFBRACK         reduce using rule 23 (lines -> .)
    RETURN          shift and go to state 54
    IF              shift and go to state 56
    WHILE           shift and go to state 59
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 52
    POINTER         shift and go to state 51

    type                           shift and go to state 61
    line                           shift and go to state 60
    lines                          shift and go to state 71
    ifblock                        shift and go to state 53
    startwithstar                  shift and go to state 57
    whileblock                     shift and go to state 58
    assignmentlist                 shift and go to state 63
    assignment                     shift and go to state 62

state 54

    (47) line -> RETURN . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    startwithany                   shift and go to state 72

state 55

    (21) mainblock -> VOID MAIN LPAREN RPAREN LFBRACK lines . RFBRACK

    RFBRACK         shift and go to state 73


state 56

    (26) ifblock -> IF . LPAREN CONDITION RPAREN conditionalbody
    (28) ifblock -> IF . LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler

    LPAREN          shift and go to state 74


state 57

    (57) assignment -> startwithstar . ASSIGN arithmeticexpr

    ASSIGN          shift and go to state 75


state 58

    (25) lines -> whileblock . lines
    (22) lines -> . line SEMICOLON lines
    (23) lines -> .
    (24) lines -> . ifblock lines
    (25) lines -> . whileblock lines
    (45) line -> . type decllist
    (46) line -> . assignmentlist
    (47) line -> . RETURN startwithany
    (26) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody
    (28) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler
    (27) whileblock -> . WHILE LPAREN CONDITION RPAREN conditionalbody
    (19) type -> . INT
    (20) type -> . FLOAT
    (55) assignmentlist -> . assignment
    (56) assignment -> . NAME ASSIGN arithmeticexpr
    (57) assignment -> . startwithstar ASSIGN arithmeticexpr
    (67) startwithstar -> . POINTER startwithany

    RFBRACK         reduce using rule 23 (lines -> .)
    RETURN          shift and go to state 54
    IF              shift and go to state 56
    WHILE           shift and go to state 59
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 52
    POINTER         shift and go to state 51

    type                           shift and go to state 61
    line                           shift and go to state 60
    lines                          shift and go to state 76
    ifblock                        shift and go to state 53
    startwithstar                  shift and go to state 57
    whileblock                     shift and go to state 58
    assignmentlist                 shift and go to state 63
    assignment                     shift and go to state 62

state 59

    (27) whileblock -> WHILE . LPAREN CONDITION RPAREN conditionalbody

    LPAREN          shift and go to state 77


state 60

    (22) lines -> line . SEMICOLON lines

    SEMICOLON       shift and go to state 78


state 61

    (45) line -> type . decllist
    (48) decllist -> . pointerdef x
    (52) decllist -> . NAME x
    (49) pointerdef -> . POINTER NAME
    (50) pointerdef -> . POINTER pointerdef

    NAME            shift and go to state 79
    POINTER         shift and go to state 16

    pointerdef                     shift and go to state 81
    decllist                       shift and go to state 80

state 62

    (55) assignmentlist -> assignment .

    SEMICOLON       reduce using rule 55 (assignmentlist -> assignment .)


state 63

    (46) line -> assignmentlist .

    SEMICOLON       reduce using rule 46 (line -> assignmentlist .)


state 64

    (68) startwithany -> POINTER startwithany .

    PLUS            reduce using rule 68 (startwithany -> POINTER startwithany .)
    MINUS           reduce using rule 68 (startwithany -> POINTER startwithany .)
    POINTER         reduce using rule 68 (startwithany -> POINTER startwithany .)
    DIVIDE          reduce using rule 68 (startwithany -> POINTER startwithany .)
    SEMICOLON       reduce using rule 68 (startwithany -> POINTER startwithany .)
    LTE             reduce using rule 68 (startwithany -> POINTER startwithany .)
    GTE             reduce using rule 68 (startwithany -> POINTER startwithany .)
    LT              reduce using rule 68 (startwithany -> POINTER startwithany .)
    GT              reduce using rule 68 (startwithany -> POINTER startwithany .)
    COMPARENOTEQUAL reduce using rule 68 (startwithany -> POINTER startwithany .)
    COMPAREEQUAL    reduce using rule 68 (startwithany -> POINTER startwithany .)
    RPAREN          reduce using rule 68 (startwithany -> POINTER startwithany .)
    OR              reduce using rule 68 (startwithany -> POINTER startwithany .)
    AND             reduce using rule 68 (startwithany -> POINTER startwithany .)
    COMMA           reduce using rule 68 (startwithany -> POINTER startwithany .)
    ASSIGN          reduce using rule 68 (startwithany -> POINTER startwithany .)


state 65

    (69) startwithany -> AMPERSAND startwithany .

    PLUS            reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    MINUS           reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    POINTER         reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    DIVIDE          reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    SEMICOLON       reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    LTE             reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    GTE             reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    LT              reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    GT              reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    COMPARENOTEQUAL reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    COMPAREEQUAL    reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    RPAREN          reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    OR              reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    AND             reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    COMMA           reduce using rule 69 (startwithany -> AMPERSAND startwithany .)
    ASSIGN          reduce using rule 69 (startwithany -> AMPERSAND startwithany .)


state 66

    (11) C -> COMMA . paramlistnotempty
    (10) paramlistnotempty -> . type startwithany C
    (19) type -> . INT
    (20) type -> . FLOAT

    INT             shift and go to state 10
    FLOAT           shift and go to state 11

    type                           shift and go to state 36
    paramlistnotempty              shift and go to state 82

state 67

    (10) paramlistnotempty -> type startwithany C .

    RPAREN          reduce using rule 10 (paramlistnotempty -> type startwithany C .)


state 68

    (15) functionblock -> type functionscope LPAREN paramlist RPAREN LFBRACK . lines RFBRACK
    (22) lines -> . line SEMICOLON lines
    (23) lines -> .
    (24) lines -> . ifblock lines
    (25) lines -> . whileblock lines
    (45) line -> . type decllist
    (46) line -> . assignmentlist
    (47) line -> . RETURN startwithany
    (26) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody
    (28) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler
    (27) whileblock -> . WHILE LPAREN CONDITION RPAREN conditionalbody
    (19) type -> . INT
    (20) type -> . FLOAT
    (55) assignmentlist -> . assignment
    (56) assignment -> . NAME ASSIGN arithmeticexpr
    (57) assignment -> . startwithstar ASSIGN arithmeticexpr
    (67) startwithstar -> . POINTER startwithany

    RFBRACK         reduce using rule 23 (lines -> .)
    RETURN          shift and go to state 54
    IF              shift and go to state 56
    WHILE           shift and go to state 59
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 52
    POINTER         shift and go to state 51

    type                           shift and go to state 61
    line                           shift and go to state 60
    lines                          shift and go to state 83
    ifblock                        shift and go to state 53
    startwithstar                  shift and go to state 57
    whileblock                     shift and go to state 58
    assignmentlist                 shift and go to state 63
    assignment                     shift and go to state 62

state 69

    (67) startwithstar -> POINTER startwithany .

    ASSIGN          reduce using rule 67 (startwithstar -> POINTER startwithany .)


state 70

    (56) assignment -> NAME ASSIGN . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 88
    startwithany                   shift and go to state 87

state 71

    (24) lines -> ifblock lines .

    RFBRACK         reduce using rule 24 (lines -> ifblock lines .)


state 72

    (47) line -> RETURN startwithany .

    SEMICOLON       reduce using rule 47 (line -> RETURN startwithany .)


state 73

    (21) mainblock -> VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK .

    INT             reduce using rule 21 (mainblock -> VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK .)
    FLOAT           reduce using rule 21 (mainblock -> VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK .)
    VOID            reduce using rule 21 (mainblock -> VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK .)
    $end            reduce using rule 21 (mainblock -> VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK .)


state 74

    (26) ifblock -> IF LPAREN . CONDITION RPAREN conditionalbody
    (28) ifblock -> IF LPAREN . CONDITION RPAREN conditionalbody ELSE ifelsehandler
    (33) CONDITION -> . booleanexpr
    (34) booleanexpr -> . booleanexpr OR booleanexpr
    (35) booleanexpr -> . booleanexpr AND booleanexpr
    (36) booleanexpr -> . LPAREN booleanexpr RPAREN
    (37) booleanexpr -> . NEGATION booleanexpr
    (44) booleanexpr -> . boolfromarith
    (38) boolfromarith -> . arithmeticexpr LTE arithmeticexpr
    (39) boolfromarith -> . arithmeticexpr GTE arithmeticexpr
    (40) boolfromarith -> . arithmeticexpr LT arithmeticexpr
    (41) boolfromarith -> . arithmeticexpr GT arithmeticexpr
    (42) boolfromarith -> . arithmeticexpr COMPARENOTEQUAL arithmeticexpr
    (43) boolfromarith -> . arithmeticexpr COMPAREEQUAL arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    LPAREN          shift and go to state 94
    NEGATION        shift and go to state 90
    MINUS           shift and go to state 85
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    boolfromarith                  shift and go to state 93
    booleanexpr                    shift and go to state 91
    CONDITION                      shift and go to state 92
    arithmeticexpr                 shift and go to state 95
    startwithany                   shift and go to state 87

state 75

    (57) assignment -> startwithstar ASSIGN . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 96
    startwithany                   shift and go to state 87

state 76

    (25) lines -> whileblock lines .

    RFBRACK         reduce using rule 25 (lines -> whileblock lines .)


state 77

    (27) whileblock -> WHILE LPAREN . CONDITION RPAREN conditionalbody
    (33) CONDITION -> . booleanexpr
    (34) booleanexpr -> . booleanexpr OR booleanexpr
    (35) booleanexpr -> . booleanexpr AND booleanexpr
    (36) booleanexpr -> . LPAREN booleanexpr RPAREN
    (37) booleanexpr -> . NEGATION booleanexpr
    (44) booleanexpr -> . boolfromarith
    (38) boolfromarith -> . arithmeticexpr LTE arithmeticexpr
    (39) boolfromarith -> . arithmeticexpr GTE arithmeticexpr
    (40) boolfromarith -> . arithmeticexpr LT arithmeticexpr
    (41) boolfromarith -> . arithmeticexpr GT arithmeticexpr
    (42) boolfromarith -> . arithmeticexpr COMPARENOTEQUAL arithmeticexpr
    (43) boolfromarith -> . arithmeticexpr COMPAREEQUAL arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    LPAREN          shift and go to state 94
    NEGATION        shift and go to state 90
    MINUS           shift and go to state 85
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    boolfromarith                  shift and go to state 93
    booleanexpr                    shift and go to state 91
    CONDITION                      shift and go to state 97
    arithmeticexpr                 shift and go to state 95
    startwithany                   shift and go to state 87

state 78

    (22) lines -> line SEMICOLON . lines
    (22) lines -> . line SEMICOLON lines
    (23) lines -> .
    (24) lines -> . ifblock lines
    (25) lines -> . whileblock lines
    (45) line -> . type decllist
    (46) line -> . assignmentlist
    (47) line -> . RETURN startwithany
    (26) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody
    (28) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler
    (27) whileblock -> . WHILE LPAREN CONDITION RPAREN conditionalbody
    (19) type -> . INT
    (20) type -> . FLOAT
    (55) assignmentlist -> . assignment
    (56) assignment -> . NAME ASSIGN arithmeticexpr
    (57) assignment -> . startwithstar ASSIGN arithmeticexpr
    (67) startwithstar -> . POINTER startwithany

    RFBRACK         reduce using rule 23 (lines -> .)
    RETURN          shift and go to state 54
    IF              shift and go to state 56
    WHILE           shift and go to state 59
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 52
    POINTER         shift and go to state 51

    type                           shift and go to state 61
    line                           shift and go to state 60
    ifblock                        shift and go to state 53
    lines                          shift and go to state 98
    startwithstar                  shift and go to state 57
    whileblock                     shift and go to state 58
    assignmentlist                 shift and go to state 63
    assignment                     shift and go to state 62

state 79

    (52) decllist -> NAME . x
    (51) x -> . COMMA pointerdef x
    (53) x -> . COMMA NAME x
    (54) x -> .

    COMMA           shift and go to state 28
    SEMICOLON       reduce using rule 54 (x -> .)

    x                              shift and go to state 27

state 80

    (45) line -> type decllist .

    SEMICOLON       reduce using rule 45 (line -> type decllist .)


state 81

    (48) decllist -> pointerdef . x
    (51) x -> . COMMA pointerdef x
    (53) x -> . COMMA NAME x
    (54) x -> .

    COMMA           shift and go to state 28
    SEMICOLON       reduce using rule 54 (x -> .)

    x                              shift and go to state 31

state 82

    (11) C -> COMMA paramlistnotempty .

    RPAREN          reduce using rule 11 (C -> COMMA paramlistnotempty .)


state 83

    (15) functionblock -> type functionscope LPAREN paramlist RPAREN LFBRACK lines . RFBRACK

    RFBRACK         shift and go to state 99


state 84

    (63) arithmeticexpr -> LPAREN . arithmeticexpr RPAREN
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 100
    startwithany                   shift and go to state 87

state 85

    (62) arithmeticexpr -> MINUS . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 101
    startwithany                   shift and go to state 87

state 86

    (64) arithmeticexpr -> NUMBER .

    LTE             reduce using rule 64 (arithmeticexpr -> NUMBER .)
    GTE             reduce using rule 64 (arithmeticexpr -> NUMBER .)
    LT              reduce using rule 64 (arithmeticexpr -> NUMBER .)
    GT              reduce using rule 64 (arithmeticexpr -> NUMBER .)
    COMPARENOTEQUAL reduce using rule 64 (arithmeticexpr -> NUMBER .)
    COMPAREEQUAL    reduce using rule 64 (arithmeticexpr -> NUMBER .)
    PLUS            reduce using rule 64 (arithmeticexpr -> NUMBER .)
    MINUS           reduce using rule 64 (arithmeticexpr -> NUMBER .)
    POINTER         reduce using rule 64 (arithmeticexpr -> NUMBER .)
    DIVIDE          reduce using rule 64 (arithmeticexpr -> NUMBER .)
    OR              reduce using rule 64 (arithmeticexpr -> NUMBER .)
    AND             reduce using rule 64 (arithmeticexpr -> NUMBER .)
    RPAREN          reduce using rule 64 (arithmeticexpr -> NUMBER .)
    SEMICOLON       reduce using rule 64 (arithmeticexpr -> NUMBER .)


state 87

    (66) arithmeticexpr -> startwithany .

    LTE             reduce using rule 66 (arithmeticexpr -> startwithany .)
    GTE             reduce using rule 66 (arithmeticexpr -> startwithany .)
    LT              reduce using rule 66 (arithmeticexpr -> startwithany .)
    GT              reduce using rule 66 (arithmeticexpr -> startwithany .)
    COMPARENOTEQUAL reduce using rule 66 (arithmeticexpr -> startwithany .)
    COMPAREEQUAL    reduce using rule 66 (arithmeticexpr -> startwithany .)
    PLUS            reduce using rule 66 (arithmeticexpr -> startwithany .)
    MINUS           reduce using rule 66 (arithmeticexpr -> startwithany .)
    POINTER         reduce using rule 66 (arithmeticexpr -> startwithany .)
    DIVIDE          reduce using rule 66 (arithmeticexpr -> startwithany .)
    OR              reduce using rule 66 (arithmeticexpr -> startwithany .)
    AND             reduce using rule 66 (arithmeticexpr -> startwithany .)
    RPAREN          reduce using rule 66 (arithmeticexpr -> startwithany .)
    SEMICOLON       reduce using rule 66 (arithmeticexpr -> startwithany .)


state 88

    (56) assignment -> NAME ASSIGN arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    SEMICOLON       reduce using rule 56 (assignment -> NAME ASSIGN arithmeticexpr .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 102
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105


state 89

    (65) arithmeticexpr -> FLOATNUM .

    LTE             reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    GTE             reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    LT              reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    GT              reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    COMPARENOTEQUAL reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    COMPAREEQUAL    reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    PLUS            reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    MINUS           reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    POINTER         reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    DIVIDE          reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    OR              reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    AND             reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    RPAREN          reduce using rule 65 (arithmeticexpr -> FLOATNUM .)
    SEMICOLON       reduce using rule 65 (arithmeticexpr -> FLOATNUM .)


state 90

    (37) booleanexpr -> NEGATION . booleanexpr
    (34) booleanexpr -> . booleanexpr OR booleanexpr
    (35) booleanexpr -> . booleanexpr AND booleanexpr
    (36) booleanexpr -> . LPAREN booleanexpr RPAREN
    (37) booleanexpr -> . NEGATION booleanexpr
    (44) booleanexpr -> . boolfromarith
    (38) boolfromarith -> . arithmeticexpr LTE arithmeticexpr
    (39) boolfromarith -> . arithmeticexpr GTE arithmeticexpr
    (40) boolfromarith -> . arithmeticexpr LT arithmeticexpr
    (41) boolfromarith -> . arithmeticexpr GT arithmeticexpr
    (42) boolfromarith -> . arithmeticexpr COMPARENOTEQUAL arithmeticexpr
    (43) boolfromarith -> . arithmeticexpr COMPAREEQUAL arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    LPAREN          shift and go to state 94
    NEGATION        shift and go to state 90
    MINUS           shift and go to state 85
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    booleanexpr                    shift and go to state 106
    startwithany                   shift and go to state 87
    arithmeticexpr                 shift and go to state 95
    boolfromarith                  shift and go to state 93

state 91

    (33) CONDITION -> booleanexpr .
    (34) booleanexpr -> booleanexpr . OR booleanexpr
    (35) booleanexpr -> booleanexpr . AND booleanexpr

    RPAREN          reduce using rule 33 (CONDITION -> booleanexpr .)
    OR              shift and go to state 108
    AND             shift and go to state 107


state 92

    (26) ifblock -> IF LPAREN CONDITION . RPAREN conditionalbody
    (28) ifblock -> IF LPAREN CONDITION . RPAREN conditionalbody ELSE ifelsehandler

    RPAREN          shift and go to state 109


state 93

    (44) booleanexpr -> boolfromarith .

    OR              reduce using rule 44 (booleanexpr -> boolfromarith .)
    AND             reduce using rule 44 (booleanexpr -> boolfromarith .)
    RPAREN          reduce using rule 44 (booleanexpr -> boolfromarith .)


state 94

    (36) booleanexpr -> LPAREN . booleanexpr RPAREN
    (63) arithmeticexpr -> LPAREN . arithmeticexpr RPAREN
    (34) booleanexpr -> . booleanexpr OR booleanexpr
    (35) booleanexpr -> . booleanexpr AND booleanexpr
    (36) booleanexpr -> . LPAREN booleanexpr RPAREN
    (37) booleanexpr -> . NEGATION booleanexpr
    (44) booleanexpr -> . boolfromarith
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (38) boolfromarith -> . arithmeticexpr LTE arithmeticexpr
    (39) boolfromarith -> . arithmeticexpr GTE arithmeticexpr
    (40) boolfromarith -> . arithmeticexpr LT arithmeticexpr
    (41) boolfromarith -> . arithmeticexpr GT arithmeticexpr
    (42) boolfromarith -> . arithmeticexpr COMPARENOTEQUAL arithmeticexpr
    (43) boolfromarith -> . arithmeticexpr COMPAREEQUAL arithmeticexpr
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    LPAREN          shift and go to state 94
    NEGATION        shift and go to state 90
    MINUS           shift and go to state 85
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    booleanexpr                    shift and go to state 110
    startwithany                   shift and go to state 87
    arithmeticexpr                 shift and go to state 111
    boolfromarith                  shift and go to state 93

state 95

    (38) boolfromarith -> arithmeticexpr . LTE arithmeticexpr
    (39) boolfromarith -> arithmeticexpr . GTE arithmeticexpr
    (40) boolfromarith -> arithmeticexpr . LT arithmeticexpr
    (41) boolfromarith -> arithmeticexpr . GT arithmeticexpr
    (42) boolfromarith -> arithmeticexpr . COMPARENOTEQUAL arithmeticexpr
    (43) boolfromarith -> arithmeticexpr . COMPAREEQUAL arithmeticexpr
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    LTE             shift and go to state 117
    GTE             shift and go to state 116
    LT              shift and go to state 115
    GT              shift and go to state 113
    COMPARENOTEQUAL shift and go to state 114
    COMPAREEQUAL    shift and go to state 112
    PLUS            shift and go to state 104
    MINUS           shift and go to state 102
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105


state 96

    (57) assignment -> startwithstar ASSIGN arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    SEMICOLON       reduce using rule 57 (assignment -> startwithstar ASSIGN arithmeticexpr .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 102
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105


state 97

    (27) whileblock -> WHILE LPAREN CONDITION . RPAREN conditionalbody

    RPAREN          shift and go to state 118


state 98

    (22) lines -> line SEMICOLON lines .

    RFBRACK         reduce using rule 22 (lines -> line SEMICOLON lines .)


state 99

    (15) functionblock -> type functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK .

    INT             reduce using rule 15 (functionblock -> type functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK .)
    FLOAT           reduce using rule 15 (functionblock -> type functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK .)
    VOID            reduce using rule 15 (functionblock -> type functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK .)
    $end            reduce using rule 15 (functionblock -> type functionscope LPAREN paramlist RPAREN LFBRACK lines RFBRACK .)


state 100

    (63) arithmeticexpr -> LPAREN arithmeticexpr . RPAREN
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    RPAREN          shift and go to state 119
    PLUS            shift and go to state 104
    MINUS           shift and go to state 102
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105


state 101

    (62) arithmeticexpr -> MINUS arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    LTE             reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    GTE             reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    LT              reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    GT              reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    COMPARENOTEQUAL reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    COMPAREEQUAL    reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    PLUS            reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    MINUS           reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    POINTER         reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    DIVIDE          reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    OR              reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    AND             reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    RPAREN          reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)
    SEMICOLON       reduce using rule 62 (arithmeticexpr -> MINUS arithmeticexpr .)

  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 102 ]
  ! POINTER         [ shift and go to state 103 ]
  ! DIVIDE          [ shift and go to state 105 ]


state 102

    (59) arithmeticexpr -> arithmeticexpr MINUS . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 120
    startwithany                   shift and go to state 87

state 103

    (60) arithmeticexpr -> arithmeticexpr POINTER . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 121
    startwithany                   shift and go to state 87

state 104

    (58) arithmeticexpr -> arithmeticexpr PLUS . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 122
    startwithany                   shift and go to state 87

state 105

    (61) arithmeticexpr -> arithmeticexpr DIVIDE . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 123
    startwithany                   shift and go to state 87

state 106

    (37) booleanexpr -> NEGATION booleanexpr .
    (34) booleanexpr -> booleanexpr . OR booleanexpr
    (35) booleanexpr -> booleanexpr . AND booleanexpr

    OR              reduce using rule 37 (booleanexpr -> NEGATION booleanexpr .)
    AND             reduce using rule 37 (booleanexpr -> NEGATION booleanexpr .)
    RPAREN          reduce using rule 37 (booleanexpr -> NEGATION booleanexpr .)

  ! OR              [ shift and go to state 108 ]
  ! AND             [ shift and go to state 107 ]


state 107

    (35) booleanexpr -> booleanexpr AND . booleanexpr
    (34) booleanexpr -> . booleanexpr OR booleanexpr
    (35) booleanexpr -> . booleanexpr AND booleanexpr
    (36) booleanexpr -> . LPAREN booleanexpr RPAREN
    (37) booleanexpr -> . NEGATION booleanexpr
    (44) booleanexpr -> . boolfromarith
    (38) boolfromarith -> . arithmeticexpr LTE arithmeticexpr
    (39) boolfromarith -> . arithmeticexpr GTE arithmeticexpr
    (40) boolfromarith -> . arithmeticexpr LT arithmeticexpr
    (41) boolfromarith -> . arithmeticexpr GT arithmeticexpr
    (42) boolfromarith -> . arithmeticexpr COMPARENOTEQUAL arithmeticexpr
    (43) boolfromarith -> . arithmeticexpr COMPAREEQUAL arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    LPAREN          shift and go to state 94
    NEGATION        shift and go to state 90
    MINUS           shift and go to state 85
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    booleanexpr                    shift and go to state 124
    startwithany                   shift and go to state 87
    arithmeticexpr                 shift and go to state 95
    boolfromarith                  shift and go to state 93

state 108

    (34) booleanexpr -> booleanexpr OR . booleanexpr
    (34) booleanexpr -> . booleanexpr OR booleanexpr
    (35) booleanexpr -> . booleanexpr AND booleanexpr
    (36) booleanexpr -> . LPAREN booleanexpr RPAREN
    (37) booleanexpr -> . NEGATION booleanexpr
    (44) booleanexpr -> . boolfromarith
    (38) boolfromarith -> . arithmeticexpr LTE arithmeticexpr
    (39) boolfromarith -> . arithmeticexpr GTE arithmeticexpr
    (40) boolfromarith -> . arithmeticexpr LT arithmeticexpr
    (41) boolfromarith -> . arithmeticexpr GT arithmeticexpr
    (42) boolfromarith -> . arithmeticexpr COMPARENOTEQUAL arithmeticexpr
    (43) boolfromarith -> . arithmeticexpr COMPAREEQUAL arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    LPAREN          shift and go to state 94
    NEGATION        shift and go to state 90
    MINUS           shift and go to state 85
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    booleanexpr                    shift and go to state 125
    startwithany                   shift and go to state 87
    arithmeticexpr                 shift and go to state 95
    boolfromarith                  shift and go to state 93

state 109

    (26) ifblock -> IF LPAREN CONDITION RPAREN . conditionalbody
    (28) ifblock -> IF LPAREN CONDITION RPAREN . conditionalbody ELSE ifelsehandler
    (31) conditionalbody -> . line SEMICOLON
    (32) conditionalbody -> . LFBRACK lines RFBRACK
    (45) line -> . type decllist
    (46) line -> . assignmentlist
    (47) line -> . RETURN startwithany
    (19) type -> . INT
    (20) type -> . FLOAT
    (55) assignmentlist -> . assignment
    (56) assignment -> . NAME ASSIGN arithmeticexpr
    (57) assignment -> . startwithstar ASSIGN arithmeticexpr
    (67) startwithstar -> . POINTER startwithany

    LFBRACK         shift and go to state 126
    RETURN          shift and go to state 54
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 52
    POINTER         shift and go to state 51

    type                           shift and go to state 61
    line                           shift and go to state 127
    startwithstar                  shift and go to state 57
    assignmentlist                 shift and go to state 63
    conditionalbody                shift and go to state 128
    assignment                     shift and go to state 62

state 110

    (36) booleanexpr -> LPAREN booleanexpr . RPAREN
    (34) booleanexpr -> booleanexpr . OR booleanexpr
    (35) booleanexpr -> booleanexpr . AND booleanexpr

    RPAREN          shift and go to state 129
    OR              shift and go to state 108
    AND             shift and go to state 107


state 111

    (63) arithmeticexpr -> LPAREN arithmeticexpr . RPAREN
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr
    (38) boolfromarith -> arithmeticexpr . LTE arithmeticexpr
    (39) boolfromarith -> arithmeticexpr . GTE arithmeticexpr
    (40) boolfromarith -> arithmeticexpr . LT arithmeticexpr
    (41) boolfromarith -> arithmeticexpr . GT arithmeticexpr
    (42) boolfromarith -> arithmeticexpr . COMPARENOTEQUAL arithmeticexpr
    (43) boolfromarith -> arithmeticexpr . COMPAREEQUAL arithmeticexpr

    RPAREN          shift and go to state 119
    PLUS            shift and go to state 104
    MINUS           shift and go to state 102
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105
    LTE             shift and go to state 117
    GTE             shift and go to state 116
    LT              shift and go to state 115
    GT              shift and go to state 113
    COMPARENOTEQUAL shift and go to state 114
    COMPAREEQUAL    shift and go to state 112


state 112

    (43) boolfromarith -> arithmeticexpr COMPAREEQUAL . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 130
    startwithany                   shift and go to state 87

state 113

    (41) boolfromarith -> arithmeticexpr GT . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 131
    startwithany                   shift and go to state 87

state 114

    (42) boolfromarith -> arithmeticexpr COMPARENOTEQUAL . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 132
    startwithany                   shift and go to state 87

state 115

    (40) boolfromarith -> arithmeticexpr LT . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 133
    startwithany                   shift and go to state 87

state 116

    (39) boolfromarith -> arithmeticexpr GTE . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 134
    startwithany                   shift and go to state 87

state 117

    (38) boolfromarith -> arithmeticexpr LTE . arithmeticexpr
    (58) arithmeticexpr -> . arithmeticexpr PLUS arithmeticexpr
    (59) arithmeticexpr -> . arithmeticexpr MINUS arithmeticexpr
    (60) arithmeticexpr -> . arithmeticexpr POINTER arithmeticexpr
    (61) arithmeticexpr -> . arithmeticexpr DIVIDE arithmeticexpr
    (62) arithmeticexpr -> . MINUS arithmeticexpr
    (63) arithmeticexpr -> . LPAREN arithmeticexpr RPAREN
    (64) arithmeticexpr -> . NUMBER
    (65) arithmeticexpr -> . FLOATNUM
    (66) arithmeticexpr -> . startwithany
    (68) startwithany -> . POINTER startwithany
    (69) startwithany -> . AMPERSAND startwithany
    (70) startwithany -> . NAME

    MINUS           shift and go to state 85
    LPAREN          shift and go to state 84
    NUMBER          shift and go to state 86
    FLOATNUM        shift and go to state 89
    POINTER         shift and go to state 44
    AMPERSAND       shift and go to state 46
    NAME            shift and go to state 45

    arithmeticexpr                 shift and go to state 135
    startwithany                   shift and go to state 87

state 118

    (27) whileblock -> WHILE LPAREN CONDITION RPAREN . conditionalbody
    (31) conditionalbody -> . line SEMICOLON
    (32) conditionalbody -> . LFBRACK lines RFBRACK
    (45) line -> . type decllist
    (46) line -> . assignmentlist
    (47) line -> . RETURN startwithany
    (19) type -> . INT
    (20) type -> . FLOAT
    (55) assignmentlist -> . assignment
    (56) assignment -> . NAME ASSIGN arithmeticexpr
    (57) assignment -> . startwithstar ASSIGN arithmeticexpr
    (67) startwithstar -> . POINTER startwithany

    LFBRACK         shift and go to state 126
    RETURN          shift and go to state 54
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 52
    POINTER         shift and go to state 51

    type                           shift and go to state 61
    line                           shift and go to state 127
    assignmentlist                 shift and go to state 63
    conditionalbody                shift and go to state 136
    startwithstar                  shift and go to state 57
    assignment                     shift and go to state 62

state 119

    (63) arithmeticexpr -> LPAREN arithmeticexpr RPAREN .

    LTE             reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    GTE             reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    LT              reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    GT              reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    COMPARENOTEQUAL reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    COMPAREEQUAL    reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    PLUS            reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    MINUS           reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    POINTER         reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    DIVIDE          reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    OR              reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    AND             reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    RPAREN          reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)
    SEMICOLON       reduce using rule 63 (arithmeticexpr -> LPAREN arithmeticexpr RPAREN .)


state 120

    (59) arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    LTE             reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    GTE             reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    LT              reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    GT              reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    COMPARENOTEQUAL reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    COMPAREEQUAL    reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    PLUS            reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    MINUS           reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    OR              reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    AND             reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    RPAREN          reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    SEMICOLON       reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .)
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105

  ! POINTER         [ reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .) ]
  ! DIVIDE          [ reduce using rule 59 (arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr .) ]
  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 102 ]


state 121

    (60) arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    LTE             reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    GTE             reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    LT              reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    GT              reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    COMPARENOTEQUAL reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    COMPAREEQUAL    reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    PLUS            reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    MINUS           reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    POINTER         reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    DIVIDE          reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    OR              reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    AND             reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    RPAREN          reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)
    SEMICOLON       reduce using rule 60 (arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr .)

  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 102 ]
  ! POINTER         [ shift and go to state 103 ]
  ! DIVIDE          [ shift and go to state 105 ]


state 122

    (58) arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    LTE             reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    GTE             reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    LT              reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    GT              reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    COMPARENOTEQUAL reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    COMPAREEQUAL    reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    PLUS            reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    MINUS           reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    OR              reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    AND             reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    RPAREN          reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    SEMICOLON       reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .)
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105

  ! POINTER         [ reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .) ]
  ! DIVIDE          [ reduce using rule 58 (arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr .) ]
  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 102 ]


state 123

    (61) arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    LTE             reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    GTE             reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    LT              reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    GT              reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    COMPARENOTEQUAL reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    COMPAREEQUAL    reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    PLUS            reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    MINUS           reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    POINTER         reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    DIVIDE          reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    OR              reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    AND             reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    RPAREN          reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)
    SEMICOLON       reduce using rule 61 (arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr .)

  ! PLUS            [ shift and go to state 104 ]
  ! MINUS           [ shift and go to state 102 ]
  ! POINTER         [ shift and go to state 103 ]
  ! DIVIDE          [ shift and go to state 105 ]


state 124

    (35) booleanexpr -> booleanexpr AND booleanexpr .
    (34) booleanexpr -> booleanexpr . OR booleanexpr
    (35) booleanexpr -> booleanexpr . AND booleanexpr

    OR              reduce using rule 35 (booleanexpr -> booleanexpr AND booleanexpr .)
    AND             reduce using rule 35 (booleanexpr -> booleanexpr AND booleanexpr .)
    RPAREN          reduce using rule 35 (booleanexpr -> booleanexpr AND booleanexpr .)

  ! OR              [ shift and go to state 108 ]
  ! AND             [ shift and go to state 107 ]


state 125

    (34) booleanexpr -> booleanexpr OR booleanexpr .
    (34) booleanexpr -> booleanexpr . OR booleanexpr
    (35) booleanexpr -> booleanexpr . AND booleanexpr

    OR              reduce using rule 34 (booleanexpr -> booleanexpr OR booleanexpr .)
    AND             reduce using rule 34 (booleanexpr -> booleanexpr OR booleanexpr .)
    RPAREN          reduce using rule 34 (booleanexpr -> booleanexpr OR booleanexpr .)

  ! OR              [ shift and go to state 108 ]
  ! AND             [ shift and go to state 107 ]


state 126

    (32) conditionalbody -> LFBRACK . lines RFBRACK
    (22) lines -> . line SEMICOLON lines
    (23) lines -> .
    (24) lines -> . ifblock lines
    (25) lines -> . whileblock lines
    (45) line -> . type decllist
    (46) line -> . assignmentlist
    (47) line -> . RETURN startwithany
    (26) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody
    (28) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler
    (27) whileblock -> . WHILE LPAREN CONDITION RPAREN conditionalbody
    (19) type -> . INT
    (20) type -> . FLOAT
    (55) assignmentlist -> . assignment
    (56) assignment -> . NAME ASSIGN arithmeticexpr
    (57) assignment -> . startwithstar ASSIGN arithmeticexpr
    (67) startwithstar -> . POINTER startwithany

    RFBRACK         reduce using rule 23 (lines -> .)
    RETURN          shift and go to state 54
    IF              shift and go to state 56
    WHILE           shift and go to state 59
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 52
    POINTER         shift and go to state 51

    type                           shift and go to state 61
    line                           shift and go to state 60
    ifblock                        shift and go to state 53
    lines                          shift and go to state 137
    startwithstar                  shift and go to state 57
    whileblock                     shift and go to state 58
    assignmentlist                 shift and go to state 63
    assignment                     shift and go to state 62

state 127

    (31) conditionalbody -> line . SEMICOLON

    SEMICOLON       shift and go to state 138


state 128

    (26) ifblock -> IF LPAREN CONDITION RPAREN conditionalbody .
    (28) ifblock -> IF LPAREN CONDITION RPAREN conditionalbody . ELSE ifelsehandler

    RETURN          reduce using rule 26 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody .)
    IF              reduce using rule 26 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody .)
    WHILE           reduce using rule 26 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody .)
    INT             reduce using rule 26 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody .)
    FLOAT           reduce using rule 26 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody .)
    NAME            reduce using rule 26 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody .)
    POINTER         reduce using rule 26 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody .)
    RFBRACK         reduce using rule 26 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody .)
    ELSE            shift and go to state 139


state 129

    (36) booleanexpr -> LPAREN booleanexpr RPAREN .

    OR              reduce using rule 36 (booleanexpr -> LPAREN booleanexpr RPAREN .)
    AND             reduce using rule 36 (booleanexpr -> LPAREN booleanexpr RPAREN .)
    RPAREN          reduce using rule 36 (booleanexpr -> LPAREN booleanexpr RPAREN .)


state 130

    (43) boolfromarith -> arithmeticexpr COMPAREEQUAL arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    OR              reduce using rule 43 (boolfromarith -> arithmeticexpr COMPAREEQUAL arithmeticexpr .)
    AND             reduce using rule 43 (boolfromarith -> arithmeticexpr COMPAREEQUAL arithmeticexpr .)
    RPAREN          reduce using rule 43 (boolfromarith -> arithmeticexpr COMPAREEQUAL arithmeticexpr .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 102
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105


state 131

    (41) boolfromarith -> arithmeticexpr GT arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    OR              reduce using rule 41 (boolfromarith -> arithmeticexpr GT arithmeticexpr .)
    AND             reduce using rule 41 (boolfromarith -> arithmeticexpr GT arithmeticexpr .)
    RPAREN          reduce using rule 41 (boolfromarith -> arithmeticexpr GT arithmeticexpr .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 102
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105


state 132

    (42) boolfromarith -> arithmeticexpr COMPARENOTEQUAL arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    OR              reduce using rule 42 (boolfromarith -> arithmeticexpr COMPARENOTEQUAL arithmeticexpr .)
    AND             reduce using rule 42 (boolfromarith -> arithmeticexpr COMPARENOTEQUAL arithmeticexpr .)
    RPAREN          reduce using rule 42 (boolfromarith -> arithmeticexpr COMPARENOTEQUAL arithmeticexpr .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 102
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105


state 133

    (40) boolfromarith -> arithmeticexpr LT arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    OR              reduce using rule 40 (boolfromarith -> arithmeticexpr LT arithmeticexpr .)
    AND             reduce using rule 40 (boolfromarith -> arithmeticexpr LT arithmeticexpr .)
    RPAREN          reduce using rule 40 (boolfromarith -> arithmeticexpr LT arithmeticexpr .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 102
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105


state 134

    (39) boolfromarith -> arithmeticexpr GTE arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    OR              reduce using rule 39 (boolfromarith -> arithmeticexpr GTE arithmeticexpr .)
    AND             reduce using rule 39 (boolfromarith -> arithmeticexpr GTE arithmeticexpr .)
    RPAREN          reduce using rule 39 (boolfromarith -> arithmeticexpr GTE arithmeticexpr .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 102
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105


state 135

    (38) boolfromarith -> arithmeticexpr LTE arithmeticexpr .
    (58) arithmeticexpr -> arithmeticexpr . PLUS arithmeticexpr
    (59) arithmeticexpr -> arithmeticexpr . MINUS arithmeticexpr
    (60) arithmeticexpr -> arithmeticexpr . POINTER arithmeticexpr
    (61) arithmeticexpr -> arithmeticexpr . DIVIDE arithmeticexpr

    OR              reduce using rule 38 (boolfromarith -> arithmeticexpr LTE arithmeticexpr .)
    AND             reduce using rule 38 (boolfromarith -> arithmeticexpr LTE arithmeticexpr .)
    RPAREN          reduce using rule 38 (boolfromarith -> arithmeticexpr LTE arithmeticexpr .)
    PLUS            shift and go to state 104
    MINUS           shift and go to state 102
    POINTER         shift and go to state 103
    DIVIDE          shift and go to state 105


state 136

    (27) whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody .

    RETURN          reduce using rule 27 (whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody .)
    IF              reduce using rule 27 (whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody .)
    WHILE           reduce using rule 27 (whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody .)
    INT             reduce using rule 27 (whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody .)
    FLOAT           reduce using rule 27 (whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody .)
    NAME            reduce using rule 27 (whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody .)
    POINTER         reduce using rule 27 (whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody .)
    RFBRACK         reduce using rule 27 (whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody .)


state 137

    (32) conditionalbody -> LFBRACK lines . RFBRACK

    RFBRACK         shift and go to state 140


state 138

    (31) conditionalbody -> line SEMICOLON .

    RETURN          reduce using rule 31 (conditionalbody -> line SEMICOLON .)
    IF              reduce using rule 31 (conditionalbody -> line SEMICOLON .)
    WHILE           reduce using rule 31 (conditionalbody -> line SEMICOLON .)
    INT             reduce using rule 31 (conditionalbody -> line SEMICOLON .)
    FLOAT           reduce using rule 31 (conditionalbody -> line SEMICOLON .)
    NAME            reduce using rule 31 (conditionalbody -> line SEMICOLON .)
    POINTER         reduce using rule 31 (conditionalbody -> line SEMICOLON .)
    RFBRACK         reduce using rule 31 (conditionalbody -> line SEMICOLON .)
    ELSE            reduce using rule 31 (conditionalbody -> line SEMICOLON .)


state 139

    (28) ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE . ifelsehandler
    (29) ifelsehandler -> . conditionalbody
    (30) ifelsehandler -> . ifblock
    (31) conditionalbody -> . line SEMICOLON
    (32) conditionalbody -> . LFBRACK lines RFBRACK
    (26) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody
    (28) ifblock -> . IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler
    (45) line -> . type decllist
    (46) line -> . assignmentlist
    (47) line -> . RETURN startwithany
    (19) type -> . INT
    (20) type -> . FLOAT
    (55) assignmentlist -> . assignment
    (56) assignment -> . NAME ASSIGN arithmeticexpr
    (57) assignment -> . startwithstar ASSIGN arithmeticexpr
    (67) startwithstar -> . POINTER startwithany

    LFBRACK         shift and go to state 126
    IF              shift and go to state 56
    RETURN          shift and go to state 54
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    NAME            shift and go to state 52
    POINTER         shift and go to state 51

    type                           shift and go to state 61
    line                           shift and go to state 127
    ifblock                        shift and go to state 141
    startwithstar                  shift and go to state 57
    ifelsehandler                  shift and go to state 142
    assignmentlist                 shift and go to state 63
    conditionalbody                shift and go to state 143
    assignment                     shift and go to state 62

state 140

    (32) conditionalbody -> LFBRACK lines RFBRACK .

    RETURN          reduce using rule 32 (conditionalbody -> LFBRACK lines RFBRACK .)
    IF              reduce using rule 32 (conditionalbody -> LFBRACK lines RFBRACK .)
    WHILE           reduce using rule 32 (conditionalbody -> LFBRACK lines RFBRACK .)
    INT             reduce using rule 32 (conditionalbody -> LFBRACK lines RFBRACK .)
    FLOAT           reduce using rule 32 (conditionalbody -> LFBRACK lines RFBRACK .)
    NAME            reduce using rule 32 (conditionalbody -> LFBRACK lines RFBRACK .)
    POINTER         reduce using rule 32 (conditionalbody -> LFBRACK lines RFBRACK .)
    RFBRACK         reduce using rule 32 (conditionalbody -> LFBRACK lines RFBRACK .)
    ELSE            reduce using rule 32 (conditionalbody -> LFBRACK lines RFBRACK .)


state 141

    (30) ifelsehandler -> ifblock .

    RETURN          reduce using rule 30 (ifelsehandler -> ifblock .)
    IF              reduce using rule 30 (ifelsehandler -> ifblock .)
    WHILE           reduce using rule 30 (ifelsehandler -> ifblock .)
    INT             reduce using rule 30 (ifelsehandler -> ifblock .)
    FLOAT           reduce using rule 30 (ifelsehandler -> ifblock .)
    NAME            reduce using rule 30 (ifelsehandler -> ifblock .)
    POINTER         reduce using rule 30 (ifelsehandler -> ifblock .)
    RFBRACK         reduce using rule 30 (ifelsehandler -> ifblock .)


state 142

    (28) ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler .

    RETURN          reduce using rule 28 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler .)
    IF              reduce using rule 28 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler .)
    WHILE           reduce using rule 28 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler .)
    INT             reduce using rule 28 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler .)
    FLOAT           reduce using rule 28 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler .)
    NAME            reduce using rule 28 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler .)
    POINTER         reduce using rule 28 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler .)
    RFBRACK         reduce using rule 28 (ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler .)


state 143

    (29) ifelsehandler -> conditionalbody .

    RETURN          reduce using rule 29 (ifelsehandler -> conditionalbody .)
    IF              reduce using rule 29 (ifelsehandler -> conditionalbody .)
    WHILE           reduce using rule 29 (ifelsehandler -> conditionalbody .)
    INT             reduce using rule 29 (ifelsehandler -> conditionalbody .)
    FLOAT           reduce using rule 29 (ifelsehandler -> conditionalbody .)
    NAME            reduce using rule 29 (ifelsehandler -> conditionalbody .)
    POINTER         reduce using rule 29 (ifelsehandler -> conditionalbody .)
    RFBRACK         reduce using rule 29 (ifelsehandler -> conditionalbody .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 17 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 20 resolved as shift
