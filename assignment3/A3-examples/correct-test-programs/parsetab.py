
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftPOINTERDIVIDErightUMINUSleftORANDrightNEGATIONINT VOID MAIN IF WHILE ELSE NAME NUMBER POINTER ASSIGN COMMA LFBRACK RFBRACK LPAREN RPAREN SEMICOLON AMPERSAND PLUS MINUS DIVIDE LTE GTE LT GT COMPAREEQUAL NEGATION COMPARENOTEQUAL OR AND\n\tstatement : VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK\n\t\n\tlines : line SEMICOLON lines\n\t\n\tlines : \n\t \n\tlines : ifblock lines\n\t\t\t| whileblock lines \n\t\n\tifblock : IF LPAREN CONDITION  RPAREN conditionalbody\n\t\n\twhileblock : WHILE LPAREN CONDITION RPAREN conditionalbody\n\t\n\tifblock : IF LPAREN CONDITION RPAREN  conditionalbody ELSE ifelsehandler\n\t\n\tifelsehandler : conditionalbody\n\t\n\tifelsehandler : ifblock\n\t\n\tconditionalbody : line SEMICOLON \n\t\t\t\t\t| LFBRACK lines RFBRACK \n\t\n\tCONDITION : booleanexpr\n\t\n\tbooleanexpr : booleanexpr OR booleanexpr\n\t            | booleanexpr AND booleanexpr\n\t            | LPAREN booleanexpr RPAREN\n\t            | NEGATION booleanexpr\n\t\n\tboolfromarith : arithmeticexpr LTE arithmeticexpr\n\t\t        \t | arithmeticexpr GTE arithmeticexpr\n\t\t        \t | arithmeticexpr LT arithmeticexpr\n\t\t        \t | arithmeticexpr GT arithmeticexpr\n\t\t        \t | arithmeticexpr COMPARENOTEQUAL arithmeticexpr\n\t\t        \t | arithmeticexpr COMPAREEQUAL arithmeticexpr\n\t\n\tbooleanexpr : boolfromarith\n\t\n\tline : INT decllist\n\t\t | assignmentlist\n\t\n\tdecllist : pointerdef x\n\t\n\tpointerdef : POINTER NAME\n\t\t\t\t\t| POINTER pointerdef\n\t\n\tx : COMMA pointerdef x\n\t\n\tdecllist : NAME x\n\t\n\tx : COMMA  NAME x\n\t\n\tx : \n\t\n\tassignmentlist : assignment\n\t\n\tassignment : NAME ASSIGN arithmeticexpr\n\t\n\tassignment : startwithstar ASSIGN arithmeticexpr\n\t\n\tarithmeticexpr : arithmeticexpr PLUS arithmeticexpr\n\t\t\t\t   | arithmeticexpr MINUS arithmeticexpr\n\t\t\t\t   | arithmeticexpr POINTER arithmeticexpr\n\t\t\t\t   | arithmeticexpr DIVIDE arithmeticexpr\n\t\n\tarithmeticexpr : MINUS arithmeticexpr %prec UMINUS\n\t\n\tarithmeticexpr : LPAREN arithmeticexpr RPAREN\n\t\n\tarithmeticexpr : NUMBER\n\t\n\tarithmeticexpr : startwithany\n\t\n\tstartwithstar : POINTER startwithany\n\t\n\tstartwithany : POINTER startwithany\n\t\t\t\t| AMPERSAND startwithany\n\t\t\t\t| NAME\n\t'
    
_lr_action_items = {'MINUS':([19,28,29,32,34,35,36,37,38,39,46,47,49,52,53,54,56,57,58,59,60,61,64,65,66,67,68,69,70,74,75,77,78,79,80,81,84,85,86,87,88,89,],[35,35,35,-48,35,35,-43,-44,35,58,58,35,35,58,-46,-47,-41,58,35,35,35,35,35,35,35,35,35,35,58,35,35,-42,-38,-39,-37,-40,58,58,58,58,58,58,]),'LT':([32,36,37,46,53,54,56,70,77,78,79,80,81,],[-48,-43,-44,64,-46,-47,-41,64,-42,-38,-39,-37,-40,]),'NUMBER':([19,28,29,34,35,38,47,49,58,59,60,61,64,65,66,67,68,69,74,75,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'DIVIDE':([32,36,37,39,46,52,53,54,56,57,70,77,78,79,80,81,84,85,86,87,88,89,],[-48,-43,-44,61,61,61,-46,-47,-41,61,61,-42,61,-39,61,-40,61,61,61,61,61,61,]),'NAME':([6,9,11,12,16,19,22,26,28,29,30,33,34,35,38,42,47,49,58,59,60,61,64,65,66,67,68,69,72,74,75,76,92,93,96,97,99,100,101,102,103,],[7,7,24,7,32,32,7,45,32,32,32,32,32,32,32,63,32,32,32,32,32,32,32,32,32,32,32,32,7,32,32,7,-7,7,-6,-11,7,-12,-10,-8,-9,]),'COMPAREEQUAL':([32,36,37,46,53,54,56,70,77,78,79,80,81,],[-48,-43,-44,65,-46,-47,-41,65,-42,-38,-39,-37,-40,]),'COMPARENOTEQUAL':([32,36,37,46,53,54,56,70,77,78,79,80,81,],[-48,-43,-44,67,-46,-47,-41,67,-42,-38,-39,-37,-40,]),'ASSIGN':([7,15,31,32,53,54,],[19,29,-45,-48,-46,-47,]),'LPAREN':([3,13,17,19,28,29,34,35,38,47,49,58,59,60,61,64,65,66,67,68,69,74,75,],[4,28,34,38,47,38,47,38,38,47,47,38,38,38,38,38,38,38,38,38,38,47,47,]),'VOID':([0,],[1,]),'RFBRACK':([6,8,9,12,21,22,27,40,92,93,96,97,98,100,101,102,103,],[-3,20,-3,-3,-4,-3,-5,-2,-7,-3,-6,-11,100,-12,-10,-8,-9,]),'PLUS':([32,36,37,39,46,52,53,54,56,57,70,77,78,79,80,81,84,85,86,87,88,89,],[-48,-43,-44,60,60,60,-46,-47,-41,60,60,-42,-38,-39,-37,-40,60,60,60,60,60,60,]),'WHILE':([6,9,12,22,92,93,96,97,100,101,102,103,],[13,13,13,13,-7,13,-6,-11,-12,-10,-8,-9,]),'SEMICOLON':([10,14,18,23,24,25,32,36,37,39,41,43,44,45,52,53,54,56,62,63,77,78,79,80,81,82,83,91,],[22,-26,-34,-33,-33,-25,-48,-43,-44,-35,-27,-31,-29,-28,-36,-46,-47,-41,-33,-33,-42,-38,-39,-37,-40,-30,-32,97,]),'AMPERSAND':([16,19,28,29,30,33,34,35,38,47,49,58,59,60,61,64,65,66,67,68,69,74,75,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'OR':([32,36,37,50,51,53,54,56,71,73,77,78,79,80,81,84,85,86,87,88,89,90,94,95,],[-48,-43,-44,-24,74,-46,-47,-41,74,-17,-42,-38,-39,-37,-40,-20,-23,-19,-22,-18,-21,-16,-14,-15,]),'GTE':([32,36,37,46,53,54,56,70,77,78,79,80,81,],[-48,-43,-44,66,-46,-47,-41,66,-42,-38,-39,-37,-40,]),'NEGATION':([28,34,47,49,74,75,],[49,49,49,49,49,49,]),'COMMA':([23,24,44,45,62,63,],[42,42,-29,-28,42,42,]),'$end':([2,20,],[0,-1,]),'LTE':([32,36,37,46,53,54,56,70,77,78,79,80,81,],[-48,-43,-44,68,-46,-47,-41,68,-42,-38,-39,-37,-40,]),'GT':([32,36,37,46,53,54,56,70,77,78,79,80,81,],[-48,-43,-44,69,-46,-47,-41,69,-42,-38,-39,-37,-40,]),'AND':([32,36,37,50,51,53,54,56,71,73,77,78,79,80,81,84,85,86,87,88,89,90,94,95,],[-48,-43,-44,-24,75,-46,-47,-41,75,-17,-42,-38,-39,-37,-40,-20,-23,-19,-22,-18,-21,-16,-14,-15,]),'ELSE':([96,97,100,],[99,-11,-12,]),'POINTER':([6,9,11,12,16,19,22,26,28,29,30,32,33,34,35,36,37,38,39,42,46,47,49,52,53,54,56,57,58,59,60,61,64,65,66,67,68,69,70,72,74,75,76,77,78,79,80,81,84,85,86,87,88,89,92,93,96,97,99,100,101,102,103,],[16,16,26,16,30,30,16,26,30,30,30,-48,30,30,30,-43,-44,30,59,26,59,30,30,59,-46,-47,-41,59,30,30,30,30,30,30,30,30,30,30,59,16,30,30,16,-42,59,-39,59,-40,59,59,59,59,59,59,-7,16,-6,-11,16,-12,-10,-8,-9,]),'RPAREN':([4,32,36,37,48,50,51,53,54,55,56,57,70,71,73,77,78,79,80,81,84,85,86,87,88,89,90,94,95,],[5,-48,-43,-44,72,-24,-13,-46,-47,76,-41,77,77,90,-17,-42,-38,-39,-37,-40,-20,-23,-19,-22,-18,-21,-16,-14,-15,]),'IF':([6,9,12,22,92,93,96,97,99,100,101,102,103,],[17,17,17,17,-7,17,-6,-11,17,-12,-10,-8,-9,]),'MAIN':([1,],[3,]),'LFBRACK':([5,72,76,99,],[6,93,93,93,]),'INT':([6,9,12,22,72,76,92,93,96,97,99,100,101,102,103,],[11,11,11,11,11,11,-7,11,-6,-11,11,-12,-10,-8,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'x':([23,24,62,63,],[41,43,82,83,]),'assignmentlist':([6,9,12,22,72,76,93,99,],[14,14,14,14,14,14,14,14,]),'pointerdef':([11,26,42,],[23,44,62,]),'statement':([0,],[2,]),'startwithstar':([6,9,12,22,72,76,93,99,],[15,15,15,15,15,15,15,15,]),'arithmeticexpr':([19,28,29,34,35,38,47,49,58,59,60,61,64,65,66,67,68,69,74,75,],[39,46,52,46,56,57,70,46,78,79,80,81,84,85,86,87,88,89,46,46,]),'decllist':([11,],[25,]),'lines':([6,9,12,22,93,],[8,21,27,40,98,]),'ifblock':([6,9,12,22,93,99,],[9,9,9,9,9,101,]),'line':([6,9,12,22,72,76,93,99,],[10,10,10,10,91,91,10,91,]),'boolfromarith':([28,34,47,49,74,75,],[50,50,50,50,50,50,]),'conditionalbody':([72,76,99,],[92,96,103,]),'whileblock':([6,9,12,22,93,],[12,12,12,12,12,]),'ifelsehandler':([99,],[102,]),'assignment':([6,9,12,22,72,76,93,99,],[18,18,18,18,18,18,18,18,]),'CONDITION':([28,34,],[48,55,]),'booleanexpr':([28,34,47,49,74,75,],[51,51,71,73,94,95,]),'startwithany':([16,19,28,29,30,33,34,35,38,47,49,58,59,60,61,64,65,66,67,68,69,74,75,],[31,37,37,37,53,54,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VOID MAIN LPAREN RPAREN LFBRACK lines RFBRACK','statement',7,'p_statement_INIT','parser.py',115),
  ('lines -> line SEMICOLON lines','lines',3,'p_lines_line','parser.py',126),
  ('lines -> <empty>','lines',0,'p_lines_eps','parser.py',142),
  ('lines -> ifblock lines','lines',2,'p_lines_defblock','parser.py',148),
  ('lines -> whileblock lines','lines',2,'p_lines_defblock','parser.py',149),
  ('ifblock -> IF LPAREN CONDITION RPAREN conditionalbody','ifblock',5,'p_ifblock_if','parser.py',163),
  ('whileblock -> WHILE LPAREN CONDITION RPAREN conditionalbody','whileblock',5,'p_whileblock_def','parser.py',170),
  ('ifblock -> IF LPAREN CONDITION RPAREN conditionalbody ELSE ifelsehandler','ifblock',7,'p_ifblock_ifelse','parser.py',177),
  ('ifelsehandler -> conditionalbody','ifelsehandler',1,'p_ifelsehandler_terminate','parser.py',186),
  ('ifelsehandler -> ifblock','ifelsehandler',1,'p_ifelsehandler_nem','parser.py',192),
  ('conditionalbody -> line SEMICOLON','conditionalbody',2,'p_conditionalbody_def','parser.py',198),
  ('conditionalbody -> LFBRACK lines RFBRACK','conditionalbody',3,'p_conditionalbody_def','parser.py',199),
  ('CONDITION -> booleanexpr','CONDITION',1,'p_CONDITION_exist','parser.py',211),
  ('booleanexpr -> booleanexpr OR booleanexpr','booleanexpr',3,'p_booleanexpr_term','parser.py',217),
  ('booleanexpr -> booleanexpr AND booleanexpr','booleanexpr',3,'p_booleanexpr_term','parser.py',218),
  ('booleanexpr -> LPAREN booleanexpr RPAREN','booleanexpr',3,'p_booleanexpr_term','parser.py',219),
  ('booleanexpr -> NEGATION booleanexpr','booleanexpr',2,'p_booleanexpr_term','parser.py',220),
  ('boolfromarith -> arithmeticexpr LTE arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','parser.py',236),
  ('boolfromarith -> arithmeticexpr GTE arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','parser.py',237),
  ('boolfromarith -> arithmeticexpr LT arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','parser.py',238),
  ('boolfromarith -> arithmeticexpr GT arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','parser.py',239),
  ('boolfromarith -> arithmeticexpr COMPARENOTEQUAL arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','parser.py',240),
  ('boolfromarith -> arithmeticexpr COMPAREEQUAL arithmeticexpr','boolfromarith',3,'p_boolfromarith_def','parser.py',241),
  ('booleanexpr -> boolfromarith','booleanexpr',1,'p_booleanexpr_boolfromarith','parser.py',264),
  ('line -> INT decllist','line',2,'p_line_decl','parser.py',275),
  ('line -> assignmentlist','line',1,'p_line_decl','parser.py',276),
  ('decllist -> pointerdef x','decllist',2,'p_declist_ts','parser.py',289),
  ('pointerdef -> POINTER NAME','pointerdef',2,'p_pointerdef_ch','parser.py',298),
  ('pointerdef -> POINTER pointerdef','pointerdef',2,'p_pointerdef_ch','parser.py',299),
  ('x -> COMMA pointerdef x','x',3,'p_x_ts','parser.py',308),
  ('decllist -> NAME x','decllist',2,'p_decllist_id','parser.py',318),
  ('x -> COMMA NAME x','x',3,'p_x_listhandle','parser.py',328),
  ('x -> <empty>','x',0,'p_x_eps','parser.py',338),
  ('assignmentlist -> assignment','assignmentlist',1,'p_assignmentlist_single','parser.py',349),
  ('assignment -> NAME ASSIGN arithmeticexpr','assignment',3,'p_assignment_new_name','parser.py',360),
  ('assignment -> startwithstar ASSIGN arithmeticexpr','assignment',3,'p_assignment_new_startwithstar','parser.py',373),
  ('arithmeticexpr -> arithmeticexpr PLUS arithmeticexpr','arithmeticexpr',3,'p_arithmeticexpr_binop','parser.py',383),
  ('arithmeticexpr -> arithmeticexpr MINUS arithmeticexpr','arithmeticexpr',3,'p_arithmeticexpr_binop','parser.py',384),
  ('arithmeticexpr -> arithmeticexpr POINTER arithmeticexpr','arithmeticexpr',3,'p_arithmeticexpr_binop','parser.py',385),
  ('arithmeticexpr -> arithmeticexpr DIVIDE arithmeticexpr','arithmeticexpr',3,'p_arithmeticexpr_binop','parser.py',386),
  ('arithmeticexpr -> MINUS arithmeticexpr','arithmeticexpr',2,'p_arithmeticexpr_uminus','parser.py',402),
  ('arithmeticexpr -> LPAREN arithmeticexpr RPAREN','arithmeticexpr',3,'p_arithmeticexpr_paren','parser.py',410),
  ('arithmeticexpr -> NUMBER','arithmeticexpr',1,'p_arithmeticexpr_terminal_NUMBER','parser.py',418),
  ('arithmeticexpr -> startwithany','arithmeticexpr',1,'p_arithmeticexpr_terminal_startwithany','parser.py',426),
  ('startwithstar -> POINTER startwithany','startwithstar',2,'p_startwithstar_define','parser.py',434),
  ('startwithany -> POINTER startwithany','startwithany',2,'p_startwithany_define','parser.py',442),
  ('startwithany -> AMPERSAND startwithany','startwithany',2,'p_startwithany_define','parser.py',443),
  ('startwithany -> NAME','startwithany',1,'p_startwithany_define','parser.py',444),
]
